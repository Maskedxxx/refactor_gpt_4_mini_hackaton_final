# examples/show_full_interview_simulation_prompts.py
# --- agent_meta ---
# role: interview-simulation-prompt-demo
# owner: @backend
# contract: –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è –≤—Å–µ—Ö –ø—Ä–æ–º–ø—Ç–æ–≤ —Å–∏–º—É–ª—è—Ü–∏–∏ –∏–Ω—Ç–µ—Ä–≤—å—é (HR + Candidate) –Ω–∞ –≤—Å–µ—Ö —ç—Ç–∞–ø–∞—Ö
# last_reviewed: 2025-08-18
# interfaces:
#   - main(): –ø–µ—á–∞—Ç—å –≤—Å–µ—Ö –ø—Ä–æ–º–ø—Ç–æ–≤ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ —Ä–∞—É–Ω–¥–∞ –∏–Ω—Ç–µ—Ä–≤—å—é
# --- /agent_meta ---

from __future__ import annotations

import json
import asyncio
from pathlib import Path
from typing import List, Dict, Any

from src.models import ResumeInfo, VacancyInfo
from src.llm_interview_simulation import (
    LLMInterviewSimulationGenerator,
    InterviewSimulationOptions,
    DialogMessage,
    QuestionType
)
from src.llm_interview_simulation.formatter import (
    format_resume_for_interview_simulation,
    format_vacancy_for_interview_simulation,
    format_dialog_history,
    create_candidate_profile_and_config
)
from src.llm_interview_simulation.prompts import InterviewPromptBuilder
from src.llm_interview_simulation.config import get_question_types_for_round


def load_test_data() -> tuple[ResumeInfo, VacancyInfo]:
    """–ó–∞–≥—Ä—É–∂–∞–µ—Ç —Ç–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ —Ä–µ–∑—é–º–µ –∏ –≤–∞–∫–∞–Ω—Å–∏–∏."""
    data_dir = Path(__file__).parent.parent / "tests" / "data"
    
    # –ü—ã—Ç–∞–µ–º—Å—è –∑–∞–≥—Ä—É–∑–∏—Ç—å —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –¥–∞–Ω–Ω—ã–µ, –µ—Å–ª–∏ –Ω–µ—Ç - —Å–æ–∑–¥–∞–µ–º –ø—Ä–æ—Å—Ç—ã–µ
    try:
        with (data_dir / "simple_resume.json").open("r", encoding="utf-8") as f:
            resume_data = json.load(f)
    except FileNotFoundError:
        resume_data = create_sample_resume()
    
    try:
        with (data_dir / "simple_vacancy.json").open("r", encoding="utf-8") as f:
            vacancy_data = json.load(f)
    except FileNotFoundError:
        vacancy_data = create_sample_vacancy()
    
    resume = ResumeInfo(**resume_data)
    vacancy = VacancyInfo(**vacancy_data)
    return resume, vacancy


def create_sample_resume() -> Dict[str, Any]:
    """–°–æ–∑–¥–∞–µ—Ç –ø—Ä–æ—Å—Ç–æ–µ —Ç–µ—Å—Ç–æ–≤–æ–µ —Ä–µ–∑—é–º–µ."""
    return {
        "first_name": "–ê–ª–µ–∫—Å–µ–π",
        "last_name": "–°–º–∏—Ä–Ω–æ–≤",
        "title": "Middle Python Developer",
        "skills": "–û–ø—ã—Ç —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏ –Ω–∞ Python 4 –≥–æ–¥–∞. Django, FastAPI, PostgreSQL, Redis, Docker. –£—á–∞—Å—Ç–∏–µ –≤ –ø—Ä–æ–µ–∫—Ç–∞—Ö –æ—Ç –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä—ã –¥–æ –¥–µ–ø–ª–æ—è.",
        "skill_set": ["Python", "Django", "FastAPI", "PostgreSQL", "Redis", "Docker", "Git"],
        "experience": [
            {
                "company": "Tech Solutions",
                "position": "Python Developer",
                "start": "2020-06",
                "end": "2024-12",
                "description": "–†–∞–∑—Ä–∞–±–æ—Ç–∫–∞ –≤–µ–±-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏–π, API, —Ä–∞–±–æ—Ç–∞ —Å –±–∞–∑–∞–º–∏ –¥–∞–Ω–Ω—ã—Ö, –∫–æ–¥-—Ä–µ–≤—å—é"
            }
        ],
        "education": {
            "level": {"name": "–í—ã—Å—à–µ–µ"},
            "primary": [{"name": "–°–ü–±–ì–£", "result": "–ë–∞–∫–∞–ª–∞–≤—Ä –∏–Ω—Ñ–æ—Ä–º–∞—Ç–∏–∫–∏", "year": "2020"}]
        },
        "total_experience": {"months": 54},
        "salary": {"amount": 180000, "currency": "RUR"}
    }


def create_sample_vacancy() -> Dict[str, Any]:
    """–°–æ–∑–¥–∞–µ—Ç –ø—Ä–æ—Å—Ç—É—é —Ç–µ—Å—Ç–æ–≤—É—é –≤–∞–∫–∞–Ω—Å–∏—é."""
    return {
        "name": "Senior Python Developer",
        "employer": {"name": "InnovateTech"},
        "description": "–ò—â–µ–º –æ–ø—ã—Ç–Ω–æ–≥–æ Python —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫–∞ –¥–ª—è —Ä–∞–±–æ—Ç—ã –Ω–∞–¥ –≤—ã—Å–æ–∫–æ–Ω–∞–≥—Ä—É–∂–µ–Ω–Ω—ã–º–∏ —Å–∏—Å—Ç–µ–º–∞–º–∏. –¢—Ä–µ–±–æ–≤–∞–Ω–∏—è: Python, Django/FastAPI, PostgreSQL, Redis, Docker.",
        "key_skills": [
            {"name": "Python"},
            {"name": "Django"},
            {"name": "PostgreSQL"},
            {"name": "Redis"}
        ],
        "experience": {"name": "–û—Ç 3 –¥–æ 6 –ª–µ—Ç"},
        "employment": {"name": "–ü–æ–ª–Ω–∞—è –∑–∞–Ω—è—Ç–æ—Å—Ç—å"},
        "schedule": {"name": "–ü–æ–ª–Ω—ã–π –¥–µ–Ω—å"},
        "salary": "–æ—Ç 200 000 –¥–æ 300 000 —Ä—É–±."
    }


def create_mock_dialog_history(round_number: int) -> List[DialogMessage]:
    """–°–æ–∑–¥–∞–µ—Ç –º–∞–∫–µ—Ç –∏—Å—Ç–æ—Ä–∏–∏ –¥–∏–∞–ª–æ–≥–∞ –¥–ª—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏."""
    
    mock_dialogs = {
        1: [
            DialogMessage(
                speaker="HR",
                message="–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å! –†–∞—Å—Å–∫–∞–∂–∏—Ç–µ, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ —Å–µ–±–µ –∏ —Å–≤–æ—ë–º –æ–ø—ã—Ç–µ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏.",
                round_number=1,
                question_type=QuestionType.INTRODUCTION
            ),
            DialogMessage(
                speaker="Candidate",
                message="–ü—Ä–∏–≤–µ—Ç! –ú–µ–Ω—è –∑–æ–≤—É—Ç –ê–ª–µ–∫—Å–µ–π, —è Python —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫ —Å 4-–ª–µ—Ç–Ω–∏–º –æ–ø—ã—Ç–æ–º. –†–∞–±–æ—Ç–∞—é —Å Django –∏ FastAPI, –µ—Å—Ç—å –æ–ø—ã—Ç —Å PostgreSQL –∏ Docker.",
                round_number=1,
                response_quality=4
            )
        ],
        2: [
            DialogMessage(
                speaker="HR",
                message="–†–∞—Å—Å–∫–∞–∂–∏—Ç–µ –ø–æ–¥—Ä–æ–±–Ω–µ–µ –æ –≤–∞—à–µ–º –æ–ø—ã—Ç–µ —Å Django. –ö–∞–∫–∏–µ —Å–ª–æ–∂–Ω—ã–µ –∑–∞–¥–∞—á–∏ —Ä–µ—à–∞–ª–∏?",
                round_number=2,
                question_type=QuestionType.TECHNICAL_SKILLS
            ),
            DialogMessage(
                speaker="Candidate",
                message="–í –ø–æ—Å–ª–µ–¥–Ω–µ–º –ø—Ä–æ–µ–∫—Ç–µ —Å–æ–∑–¥–∞–≤–∞–ª —Å–∏—Å—Ç–µ–º—É –∞–Ω–∞–ª–∏—Ç–∏–∫–∏ —Å Django. –û—Å–Ω–æ–≤–Ω–∞—è —Å–ª–æ–∂–Ω–æ—Å—Ç—å –±—ã–ª–∞ –≤ –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏ –∑–∞–ø—Ä–æ—Å–æ–≤ - –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–ª select_related, prefetch_related, –¥–æ–±–∞–≤–∏–ª –∏–Ω–¥–µ–∫—Å—ã. –ü—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –≤—ã—Ä–æ—Å–ª–∞ –≤ 5 —Ä–∞–∑.",
                round_number=2,
                response_quality=5
            )
        ],
        3: [
            DialogMessage(
                speaker="HR",
                message="–û–ø–∏—à–∏—Ç–µ —Å–∏—Ç—É–∞—Ü–∏—é, –∫–æ–≥–¥–∞ –≤–∞–º –ø—Ä–∏—à–ª–æ—Å—å —Ä–∞–±–æ—Ç–∞—Ç—å –≤ –∫–æ–º–∞–Ω–¥–µ –Ω–∞–¥ —Å–ª–æ–∂–Ω–æ–π –∑–∞–¥–∞—á–µ–π. –ö–∞–∫ —Ä–µ—à–∞–ª–∏ –∫–æ–Ω—Ñ–ª–∏–∫—Ç—ã?",
                round_number=3,
                question_type=QuestionType.BEHAVIORAL_STAR
            ),
            DialogMessage(
                speaker="Candidate",
                message="–ë—ã–ª –ø—Ä–æ–µ–∫—Ç –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ —Å –≤–Ω–µ—à–Ω–∏–º API. –í–æ–∑–Ω–∏–∫ –∫–æ–Ω—Ñ–ª–∏–∫—Ç –ø–æ –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–µ —Å –∫–æ–ª–ª–µ–≥–æ–π. –û—Ä–≥–∞–Ω–∏–∑–æ–≤–∞–ª –≤—Å—Ç—Ä–µ—á—É, –≤—ã—Å–ª—É—à–∞–ª –≤—Å–µ —Ç–æ—á–∫–∏ –∑—Ä–µ–Ω–∏—è, –ø—Ä–µ–¥–ª–æ–∂–∏–ª —Å–æ–∑–¥–∞—Ç—å –ø—Ä–æ—Ç–æ—Ç–∏–ø—ã –æ–±–æ–∏—Ö –ø–æ–¥—Ö–æ–¥–æ–≤. –í –∏—Ç–æ–≥–µ –≤—ã–±—Ä–∞–ª–∏ –≥–∏–±—Ä–∏–¥–Ω–æ–µ —Ä–µ—à–µ–Ω–∏–µ.",
                round_number=3,
                response_quality=4
            )
        ]
    }
    
    # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –∏—Å—Ç–æ—Ä–∏—é –¥–æ —É–∫–∞–∑–∞–Ω–Ω–æ–≥–æ —Ä–∞—É–Ω–¥–∞
    history = []
    for r in range(1, round_number):
        if r in mock_dialogs:
            history.extend(mock_dialogs[r])
    
    return history


async def demonstrate_all_prompts():
    """–î–µ–º–æ–Ω—Å—Ç—Ä–∏—Ä—É–µ—Ç –≤—Å–µ –ø—Ä–æ–º–ø—Ç—ã –¥–ª—è —Å–∏–º—É–ª—è—Ü–∏–∏ –∏–Ω—Ç–µ—Ä–≤—å—é."""
    
    print("üé≠ " + "=" * 100)
    print("     –î–ï–ú–û–ù–°–¢–†–ê–¶–ò–Ø –í–°–ï–• –ü–†–û–ú–ü–¢–û–í –°–ò–ú–£–õ–Ø–¶–ò–ò –ò–ù–¢–ï–†–í–¨–Æ")
    print("=" * 100)
    
    # 1. –ó–∞–≥—Ä—É–∂–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ
    print("\nüìñ –ó–∞–≥—Ä—É–∂–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ...")
    resume, vacancy = load_test_data()
    
    print(f"   –ö–∞–Ω–¥–∏–¥–∞—Ç: {resume.first_name} {resume.last_name}")
    print(f"   –ü–æ–∑–∏—Ü–∏—è: {vacancy.name}")
    
    # 2. –°–æ–∑–¥–∞–µ–º –ø—Ä–æ—Ñ–∏–ª—å –∫–∞–Ω–¥–∏–¥–∞—Ç–∞ –∏ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é
    print("\nüîç –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –ø—Ä–æ—Ñ–∏–ª—å –∫–∞–Ω–¥–∏–¥–∞—Ç–∞...")
    candidate_profile, interview_config = create_candidate_profile_and_config(resume, vacancy)
    
    print(f"   –û–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω—ã–π —É—Ä–æ–≤–µ–Ω—å: {candidate_profile.detected_level.value}")
    print(f"   –û–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω–∞—è —Ä–æ–ª—å: {candidate_profile.detected_role.value}")
    print(f"   –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ä–∞—É–Ω–¥–æ–≤: {interview_config.target_rounds}")
    print(f"   –°–ª–æ–∂–Ω–æ—Å—Ç—å: {interview_config.difficulty_level}")
    
    # 3. –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –±–∞–∑–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ
    formatted_resume = format_resume_for_interview_simulation(resume)
    formatted_vacancy = format_vacancy_for_interview_simulation(vacancy)
    
    # 4. –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –æ–ø—Ü–∏–∏
    options = InterviewSimulationOptions(
        prompt_version="v1.0",
        target_rounds=interview_config.target_rounds,
        difficulty_level=interview_config.difficulty_level,
        hr_personality="neutral",
        candidate_confidence="medium",
        temperature_hr=0.7,
        temperature_candidate=0.8,
        log_detailed_prompts=True
    )
    
    # 5. –°–æ–∑–¥–∞–µ–º —Å—Ç—Ä–æ–∏—Ç–µ–ª—å –ø—Ä–æ–º–ø—Ç–æ–≤
    prompt_builder = InterviewPromptBuilder()
    
    # 6. –î–µ–º–æ–Ω—Å—Ç—Ä–∏—Ä—É–µ–º –ø—Ä–æ–º–ø—Ç—ã –¥–ª—è –∫–∞–∂–¥–æ–≥–æ —Ä–∞—É–Ω–¥–∞
    for round_num in range(1, interview_config.target_rounds + 1):
        print(f"\nüéØ " + "=" * 80)
        print(f"                           –†–ê–£–ù–î {round_num}")
        print("=" * 80)
        
        # –°–æ–∑–¥–∞–µ–º –∏—Å—Ç–æ—Ä–∏—é –¥–∏–∞–ª–æ–≥–∞ –¥–æ —ç—Ç–æ–≥–æ —Ä–∞—É–Ω–¥–∞
        dialog_history = create_mock_dialog_history(round_num)
        formatted_history = format_dialog_history(dialog_history)
        
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø –≤–æ–ø—Ä–æ—Å–∞ –¥–ª—è —Ä–∞—É–Ω–¥–∞
        possible_question_types = get_question_types_for_round(round_num)
        question_type = possible_question_types[0] if possible_question_types else QuestionType.FINAL
        
        print(f"\nüìã –ö–û–ù–¢–ï–ö–°–¢ –†–ê–£–ù–î–ê {round_num}:")
        print(f"   –¢–∏–ø –≤–æ–ø—Ä–æ—Å–∞: {question_type.value}")
        print(f"   –ò—Å—Ç–æ—Ä–∏—è –¥–∏–∞–ª–æ–≥–∞: {len(dialog_history)} —Å–æ–æ–±—â–µ–Ω–∏–π")
        
        # === HR –ü–†–û–ú–ü–¢ ===
        print(f"\nüë§ HR –ü–†–û–ú–ü–¢ (—Ä–∞—É–Ω–¥ {round_num}):")
        print("-" * 60)
        
        hr_prompt = prompt_builder.build_hr_prompt(
            formatted_resume=formatted_resume,
            formatted_vacancy=formatted_vacancy,
            formatted_history=formatted_history,
            round_number=round_num,
            question_type=question_type,
            candidate_profile=candidate_profile,
            interview_config=interview_config,
            options=options
        )
        
        print(f"\nüî∏ SYSTEM PROMPT (HR —Ä–∞—É–Ω–¥ {round_num}):")
        print("‚îÄ" * 40)
        print(hr_prompt.system)
        
        print(f"\nüî∏ USER PROMPT (HR —Ä–∞—É–Ω–¥ {round_num}):")
        print("‚îÄ" * 40)
        print(hr_prompt.user)
        
        # –ï—Å–ª–∏ —ç—Ç–æ –Ω–µ –ø–µ—Ä–≤—ã–π —Ä–∞—É–Ω–¥, –ø–æ–∫–∞–∂–µ–º –∏ candidate –ø—Ä–æ–º–ø—Ç
        if round_num > 1:
            # –°–æ–∑–¥–∞–µ–º –ø—Ä–∏–º–µ—Ä –≤–æ–ø—Ä–æ—Å–∞ HR –¥–ª—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏
            sample_hr_questions = {
                2: "–†–∞—Å—Å–∫–∞–∂–∏—Ç–µ –ø–æ–¥—Ä–æ–±–Ω–µ–µ –æ –≤–∞—à–µ–º –æ–ø—ã—Ç–µ —Å Django. –ö–∞–∫–∏–µ —Å–ª–æ–∂–Ω—ã–µ –∑–∞–¥–∞—á–∏ —Ä–µ—à–∞–ª–∏?",
                3: "–û–ø–∏—à–∏—Ç–µ —Å–∏—Ç—É–∞—Ü–∏—é, –∫–æ–≥–¥–∞ –≤–∞–º –ø—Ä–∏—à–ª–æ—Å—å —Ä–∞–±–æ—Ç–∞—Ç—å –≤ –∫–æ–º–∞–Ω–¥–µ –Ω–∞–¥ —Å–ª–æ–∂–Ω–æ–π –∑–∞–¥–∞—á–µ–π.",
                4: "–ß—Ç–æ –º–æ—Ç–∏–≤–∏—Ä—É–µ—Ç –≤–∞—Å –≤ —Ä–∞–±–æ—Ç–µ —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫–∞? –ü–æ—á–µ–º—É –≤—ã–±—Ä–∞–ª–∏ –Ω–∞—à—É –∫–æ–º–ø–∞–Ω–∏—é?",
                5: "–°–ø–∞—Å–∏–±–æ –∑–∞ –∏–Ω—Ç–µ—Ä–≤—å—é! –ï—Å—Ç—å –ª–∏ —É –≤–∞—Å –≤–æ–ø—Ä–æ—Å—ã –∫–æ –º–Ω–µ?"
            }
            
            sample_question = sample_hr_questions.get(
                round_num, 
                "–†–∞—Å—Å–∫–∞–∂–∏—Ç–µ –æ —Å–≤–æ–µ–º –æ–ø—ã—Ç–µ —Ä–∞–±–æ—Ç—ã —Å —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏—è–º–∏ –∏–∑ –Ω–∞—à–µ–≥–æ —Å—Ç–µ–∫–∞."
            )
            
            print(f"\nü§µ CANDIDATE –ü–†–û–ú–ü–¢ (—Ä–∞—É–Ω–¥ {round_num}):")
            print("-" * 60)
            
            candidate_prompt = prompt_builder.build_candidate_prompt(
                formatted_resume=formatted_resume,
                formatted_vacancy=formatted_vacancy,
                formatted_history=formatted_history,
                hr_question=sample_question,
                candidate_profile=candidate_profile,
                options=options
            )
            
            print(f"\nüî∏ SYSTEM PROMPT (Candidate —Ä–∞—É–Ω–¥ {round_num}):")
            print("‚îÄ" * 40)
            print(candidate_prompt.system)
            
            print(f"\nüî∏ USER PROMPT (Candidate —Ä–∞—É–Ω–¥ {round_num}):")
            print("‚îÄ" * 40)
            print(candidate_prompt.user)
            
            print(f"\nüí¨ –ü–†–ò–ú–ï–† –í–û–ü–†–û–°–ê HR: {sample_question}")
    
    # 7. –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
    print(f"\nüìä " + "=" * 80)
    print("                        –°–¢–ê–¢–ò–°–¢–ò–ö–ê –ü–†–û–ú–ü–¢–û–í")
    print("=" * 80)
    
    total_hr_prompts = interview_config.target_rounds
    total_candidate_prompts = interview_config.target_rounds - 1  # –ö–∞–Ω–¥–∏–¥–∞—Ç –Ω–µ –æ—Ç–≤–µ—á–∞–µ—Ç –Ω–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–π –≤–æ–ø—Ä–æ—Å –≤ –¥–µ–º–æ
    
    print(f"\nüìà –û–ë–©–ê–Ø –°–¢–ê–¢–ò–°–¢–ò–ö–ê:")
    print(f"   –í—Å–µ–≥–æ —Ä–∞—É–Ω–¥–æ–≤: {interview_config.target_rounds}")
    print(f"   HR –ø—Ä–æ–º–ø—Ç–æ–≤: {total_hr_prompts}")
    print(f"   Candidate –ø—Ä–æ–º–ø—Ç–æ–≤: {total_candidate_prompts}")
    print(f"   –û–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø—Ä–æ–º–ø—Ç–æ–≤: {total_hr_prompts + total_candidate_prompts}")
    
    # –ü–æ–¥—Å—á–∏—Ç—ã–≤–∞–µ–º –ø—Ä–∏–º–µ—Ä–Ω—ã–µ —Ä–∞–∑–º–µ—Ä—ã
    sample_hr_length = len(hr_prompt.system) + len(hr_prompt.user)
    sample_candidate_length = len(candidate_prompt.system) + len(candidate_prompt.user) if 'candidate_prompt' in locals() else 0
    
    estimated_total_tokens = ((sample_hr_length * total_hr_prompts) + 
                            (sample_candidate_length * total_candidate_prompts)) // 4  # –ü—Ä–∏–º–µ—Ä–Ω–æ 4 —Å–∏–º–≤–æ–ª–∞ = 1 —Ç–æ–∫–µ–Ω
    
    print(f"\nüí∞ –ü–†–ò–ú–ï–†–ù–ê–Ø –°–¢–û–ò–ú–û–°–¢–¨ (–ø—Ä–∏ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–∏ OpenAI):")
    print(f"   –°—Ä–µ–¥–Ω–∏–π —Ä–∞–∑–º–µ—Ä HR –ø—Ä–æ–º–ø—Ç–∞: ~{sample_hr_length:,} —Å–∏–º–≤–æ–ª–æ–≤")
    if sample_candidate_length > 0:
        print(f"   –°—Ä–µ–¥–Ω–∏–π —Ä–∞–∑–º–µ—Ä Candidate –ø—Ä–æ–º–ø—Ç–∞: ~{sample_candidate_length:,} —Å–∏–º–≤–æ–ª–æ–≤")
    print(f"   –ü—Ä–∏–º–µ—Ä–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç–æ–∫–µ–Ω–æ–≤: ~{estimated_total_tokens:,}")
    print(f"   –ü—Ä–∏–º–µ—Ä–Ω–∞—è —Å—Ç–æ–∏–º–æ—Å—Ç—å (gpt-4o-mini): ~${estimated_total_tokens * 0.00015 / 1000:.3f}")
    
    print(f"\nüéØ –¢–ò–ü–´ –í–û–ü–†–û–°–û–í –í –ò–ù–¢–ï–†–í–¨–Æ:")
    for round_num in range(1, interview_config.target_rounds + 1):
        question_types = get_question_types_for_round(round_num)
        types_str = ", ".join([qt.value for qt in question_types])
        print(f"   –†–∞—É–Ω–¥ {round_num}: {types_str}")
    
    print(f"\n‚úÖ –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è –ø—Ä–æ–º–ø—Ç–æ–≤ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!")
    print("=" * 100)


async def show_formatted_data_demo():
    """–î–µ–º–æ–Ω—Å—Ç—Ä–∏—Ä—É–µ—Ç —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ —Ä–µ–∑—é–º–µ –∏ –≤–∞–∫–∞–Ω—Å–∏–∏."""
    
    print("\nüìÑ " + "=" * 80)
    print("           –î–ï–ú–û–ù–°–¢–†–ê–¶–ò–Ø –§–û–†–ú–ê–¢–ò–†–û–í–ê–ù–ù–´–• –î–ê–ù–ù–´–•")
    print("=" * 80)
    
    resume, vacancy = load_test_data()
    
    print("\nüìã –§–û–†–ú–ê–¢–ò–†–û–í–ê–ù–ù–û–ï –†–ï–ó–Æ–ú–ï:")
    print("-" * 50)
    formatted_resume = format_resume_for_interview_simulation(resume)
    print(formatted_resume)
    
    print("\nüíº –§–û–†–ú–ê–¢–ò–†–û–í–ê–ù–ù–ê–Ø –í–ê–ö–ê–ù–°–ò–Ø:")
    print("-" * 50)
    formatted_vacancy = format_vacancy_for_interview_simulation(vacancy)
    print(formatted_vacancy)


def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏."""
    import argparse
    
    parser = argparse.ArgumentParser(description="–î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è –ø—Ä–æ–º–ø—Ç–æ–≤ —Å–∏–º—É–ª—è—Ü–∏–∏ –∏–Ω—Ç–µ—Ä–≤—å—é")
    parser.add_argument(
        "--show-data", 
        action="store_true", 
        help="–ü–æ–∫–∞–∑–∞—Ç—å —Ç–æ–ª—å–∫–æ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ —Ä–µ–∑—é–º–µ –∏ –≤–∞–∫–∞–Ω—Å–∏–∏"
    )
    parser.add_argument(
        "--round", 
        type=int, 
        help="–ü–æ–∫–∞–∑–∞—Ç—å –ø—Ä–æ–º–ø—Ç—ã —Ç–æ–ª—å–∫–æ –¥–ª—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω–æ–≥–æ —Ä–∞—É–Ω–¥–∞"
    )
    
    args = parser.parse_args()
    
    if args.show_data:
        asyncio.run(show_formatted_data_demo())
    else:
        asyncio.run(demonstrate_all_prompts())


if __name__ == "__main__":
    main()