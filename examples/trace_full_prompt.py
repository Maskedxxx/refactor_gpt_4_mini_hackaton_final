#!/usr/bin/env python3
"""
–°–∫—Ä–∏–ø—Ç –¥–ª—è –ø–æ–ª–Ω–æ–π —Ç—Ä–∞—Å—Å–∏—Ä–æ–≤–∫–∏ –ø—Ä–æ–º–ø—Ç–∞ gap_analyzer
–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –æ–∫–æ–Ω—á–∞—Ç–µ–ª—å–Ω—ã–π –ø—Ä–æ–º–ø—Ç –∫–æ—Ç–æ—Ä—ã–π –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç—Å—è –≤ LLM
"""

import os
import sys
import json
from pathlib import Path

# –î–æ–±–∞–≤–ª—è–µ–º src –≤ –ø—É—Ç—å –¥–ª—è –∏–º–ø–æ—Ä—Ç–æ–≤
sys.path.insert(0, str(Path(__file__).parent / "src"))

from webapp.storage_docs import SessionStore, ResumeStore, VacancyStore
from llm_gap_analyzer.formatter import format_resume_data, format_vacancy_data
from llm_gap_analyzer.prompts.mappings import extract_requirements_from_vacancy
from llm_gap_analyzer.prompts.templates import get_template
from llm_features.base.options import BaseLLMOptions

def main():
    if len(sys.argv) < 2:
        print("Usage: python trace_full_prompt.py <session_id>")
        print("Example: python trace_full_prompt.py d7b4aab2-8bd4-4fdf-bbad-2b9aa44d31f0")
        return 1
    
    session_id = sys.argv[1]
    db_path = os.getenv("WEBAPP_DB_PATH", "app.sqlite3")
    
    print(f"=== –ü–æ–ª–Ω–∞—è —Ç—Ä–∞—Å—Å–∏—Ä–æ–≤–∫–∞ –ø—Ä–æ–º–ø—Ç–∞ gap_analyzer –¥–ª—è —Å–µ—Å—Å–∏–∏ {session_id} ===")
    
    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º —Å—Ç–æ—Ä–∞–¥–∂–∏
    session_store = SessionStore(db_path)
    resume_store = ResumeStore(db_path)
    vacancy_store = VacancyStore(db_path)
    
    # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ —Å–µ—Å—Å–∏–∏
    session_data = session_store.get(session_id)
    if not session_data:
        print("‚ùå –°–µ—Å—Å–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
        return 1
    
    resume = resume_store.get(session_data['resume_id'])
    vacancy = vacancy_store.get(session_data['vacancy_id'])
    
    if not resume or not vacancy:
        print("‚ùå –†–µ–∑—é–º–µ –∏–ª–∏ –≤–∞–∫–∞–Ω—Å–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")
        return 1
    
    print("‚úÖ –î–∞–Ω–Ω—ã–µ –∑–∞–≥—Ä—É–∂–µ–Ω—ã")
    
    # –§–æ—Ä–º–∏—Ä—É–µ–º –±–ª–æ–∫–∏ —Ç–æ—á–Ω–æ –∫–∞–∫ –≤ service.py
    resume_block = format_resume_data(resume.model_dump())
    vacancy_block = format_vacancy_data(vacancy.model_dump())
    requirements_block = extract_requirements_from_vacancy(vacancy)
    
    # –í–∫–ª—é—á–∞–µ–º –ø—Ä–æ–±–ª–µ–º–∞—Ç–∏—á–Ω—ã–π –±–ª–æ–∫ –¥–ª—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏ –ø—Ä–æ–±–ª–µ–º—ã
    from llm_gap_analyzer.prompts.mappings import build_skills_match_summary
    skills_match_summary_block = build_skills_match_summary(resume, vacancy)
    extra_context_block = "(–Ω–µ—Ç)"
    
    # –ü–æ–ª—É—á–∞–µ–º —à–∞–±–ª–æ–Ω
    template = get_template("gap_analyzer.v1")
    
    # –§–æ—Ä–º–∏—Ä—É–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç
    ctx = {
        "language": "Russian",
        "resume_block": resume_block,
        "vacancy_block": vacancy_block,
        "requirements_block": requirements_block,
        "skills_match_summary_block": skills_match_summary_block,
        "extra_context_block": extra_context_block,
    }
    
    # –†–µ–Ω–¥–µ—Ä–∏–º –∏—Ç–æ–≥–æ–≤—ã–π –ø—Ä–æ–º–ø—Ç
    prompt = template.render(ctx)
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø–æ–ª–Ω—É—é —Ç—Ä–∞—Å—Å–∏—Ä–æ–≤–∫—É
    trace_file = f"gap_analyzer_FULL_PROMPT_TRACE_{session_id[:8]}.txt"
    with open(trace_file, 'w', encoding='utf-8') as f:
        f.write("="*100 + "\n")
        f.write("üîç GAP ANALYZER - –ü–û–õ–ù–ê–Ø –¢–†–ê–°–°–ò–†–û–í–ö–ê –ü–†–û–ú–ü–¢–ê (–¢–ï–ö–£–©–ê–Ø –ü–†–û–ë–õ–ï–ú–ù–ê–Ø –í–ï–†–°–ò–Ø)\n")
        f.write("="*100 + "\n\n")
        
        f.write("–°–¢–ê–¢–£–° –ü–†–û–ë–õ–ï–ú:\n")
        f.write("- ‚ùå –ü–†–û–ë–õ–ï–ú–ê–¢–ò–ß–ù–´–ô –±–ª–æ–∫ skills_match_summary –í–ö–õ–Æ–ß–ï–ù (–ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Ç–æ–ª—å–∫–æ 1 —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ!)\n")
        f.write("- ‚ùå LLM –ø–æ–ª—É—á–∞–µ—Ç –õ–û–ñ–ù–£–Æ —Å–≤–æ–¥–∫—É –≤–º–µ—Å—Ç–µ —Å –¥–µ—Ç–∞–ª—å–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏\n")
        f.write("- ‚ùå –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –ø–æ–ª–µ 'skills' –≤–º–µ—Å—Ç–æ 'skill_set' –≤ formatter.py\n")
        f.write("- ‚ùå –§—É–Ω–∫—Ü–∏—è analyze_skills_match() –¥–µ–ª–∞–µ—Ç –ø—Ä–∏–º–∏—Ç–∏–≤–Ω–æ–µ —Å—Ä–∞–≤–Ω–µ–Ω–∏–µ —Å—Ç—Ä–æ–∫\n\n")
        
        f.write("SYSTEM MESSAGE:\n")
        f.write("="*80 + "\n")
        f.write(prompt.system + "\n\n")
        
        f.write("USER MESSAGE:\n")
        f.write("="*80 + "\n")
        f.write(prompt.user + "\n\n")
        
        f.write("–°–¢–ê–¢–ò–°–¢–ò–ö–ê –ö–û–ù–¢–ï–ö–°–¢–ê:\n")
        f.write("="*80 + "\n")
        f.write(f"üìä resume_block: {len(resume_block):,} —Å–∏–º–≤–æ–ª–æ–≤\n")
        f.write(f"üìä vacancy_block: {len(vacancy_block):,} —Å–∏–º–≤–æ–ª–æ–≤\n")
        f.write(f"üìä requirements_block: {len(requirements_block):,} —Å–∏–º–≤–æ–ª–æ–≤\n")
        f.write(f"üìä skills_match_summary_block: {len(skills_match_summary_block):,} —Å–∏–º–≤–æ–ª–æ–≤ (–ü–†–û–ë–õ–ï–ú–ê–¢–ò–ß–ù–´–ô!)\n")
        f.write(f"üìä –û–ë–©–ò–ô –ü–†–û–ú–ü–¢: {len(prompt.system + prompt.user):,} —Å–∏–º–≤–æ–ª–æ–≤\n\n")
        
        # –ê–Ω–∞–ª–∏–∑ –Ω–∞–≤—ã–∫–æ–≤
        resume_skills = resume.skill_set or []
        vacancy_skills = vacancy.key_skills or []
        f.write("–ê–ù–ê–õ–ò–ó –ù–ê–í–´–ö–û–í:\n")
        f.write("="*80 + "\n")
        f.write(f"üë§ –ù–∞–≤—ã–∫–∏ –≤ —Ä–µ–∑—é–º–µ ({len(resume_skills)}): {', '.join(resume_skills[:10])}{'...' if len(resume_skills) > 10 else ''}\n")
        f.write(f"üíº –ù–∞–≤—ã–∫–∏ –≤ –≤–∞–∫–∞–Ω—Å–∏–∏ ({len(vacancy_skills)}): {', '.join(vacancy_skills)}\n")
        
        # –ü–æ–∏—Å–∫ –ø–æ—Ç–µ–Ω—Ü–∏–∞–ª—å–Ω—ã—Ö —Å–æ–≤–ø–∞–¥–µ–Ω–∏–π
        potential_matches = []
        for v_skill in vacancy_skills:
            for r_skill in resume_skills:
                if (v_skill.lower() in r_skill.lower() or r_skill.lower() in v_skill.lower() or
                    any(word in r_skill.lower() for word in ['ai', 'ml', 'llm']) and 
                    any(word in v_skill.lower() for word in ['ai', 'ml', 'nlp'])):
                    potential_matches.append(f"'{v_skill}' ‚Üî '{r_skill}'")
        
        f.write(f"üéØ –ü–æ—Ç–µ–Ω—Ü–∏–∞–ª—å–Ω—ã–µ —Å–µ–º–∞–Ω—Ç–∏—á–µ—Å–∫–∏–µ —Å–æ–≤–ø–∞–¥–µ–Ω–∏—è ({len(potential_matches)}): \n")
        for match in potential_matches[:5]:
            f.write(f"   {match}\n")
    
    print(f"üéØ –ü–û–õ–ù–ê–Ø –¢–†–ê–°–°–ò–†–û–í–ö–ê –ü–†–û–ú–ü–¢–ê –°–û–•–†–ê–ù–ï–ù–ê –í: {trace_file}")
    print(f"üìè –†–∞–∑–º–µ—Ä –ø—Ä–æ–º–ø—Ç–∞: {len(prompt.system + prompt.user):,} —Å–∏–º–≤–æ–ª–æ–≤")
    print("üîß –ü—Ä–æ–±–ª–µ–º–∞—Ç–∏—á–Ω—ã–π –±–ª–æ–∫ skills_match_summary: –í–ö–õ–Æ–ß–ï–ù ‚ùå")
    print(f"‚ö†Ô∏è  LLM –≤–∏–¥–∏—Ç –õ–û–ñ–ù–£–Æ —Å–≤–æ–¥–∫—É: —Ç–æ–ª—å–∫–æ {skills_match_summary_block.count('Docker')} —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ –∏–∑ 30+ –Ω–∞–≤—ã–∫–æ–≤!")
    
    return 0

if __name__ == "__main__":
    sys.exit(main())