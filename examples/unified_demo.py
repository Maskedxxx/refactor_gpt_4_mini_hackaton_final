# examples/unified_demo_improved.py
# --- agent_meta ---
# role: unified-demo-application-v2
# owner: @backend
# contract: –£–ª—É—á—à–µ–Ω–Ω—ã–π –µ–¥–∏–Ω—ã–π –¥–µ–º–æ-—Å–∫—Ä–∏–ø—Ç —Å —Ç–µ—Å—Ç–æ–≤—ã–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º –∏ —Ä–µ–∞–ª–∏—Å—Ç–∏—á–Ω—ã–º–∏ —Å—Ü–µ–Ω–∞—Ä–∏—è–º–∏
# last_reviewed: 2025-08-24
# interfaces:
#   - CLI: python -m examples.unified_demo_improved --scenario full-demo
#   - CLI: python -m examples.unified_demo_improved --scenario test-user-setup
#   - CLI: python -m examples.unified_demo_improved --scenario hh-auth-demo
#   - CLI: python -m examples.unified_demo_improved --scenario feature-with-hash
#   - CLI: python -m examples.unified_demo_improved --scenario feature-no-hash
# --- /agent_meta ---

import argparse
import sys
import uuid
import json
import webbrowser
from pathlib import Path
from typing import Dict, Any

import httpx

from src.utils import init_logging_from_env, get_logger

init_logging_from_env()
logger = get_logger(__name__)


class ImprovedUnifiedDemo:
    """–£–ª—É—á—à–µ–Ω–Ω—ã–π –µ–¥–∏–Ω—ã–π –¥–µ–º–æ-–∫–ª–∞—Å—Å —Å —Ç–µ—Å—Ç–æ–≤—ã–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º –∏ —Ä–µ–∞–ª–∏—Å—Ç–∏—á–Ω—ã–º–∏ —Å—Ü–µ–Ω–∞—Ä–∏—è–º–∏."""
    
    # –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Ñ–∏—á –¥–ª—è —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    AVAILABLE_FEATURES = {
        "cover_letter": {
            "enabled": True,
            "description": "–ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Å–æ–ø—Ä–æ–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ–≥–æ –ø–∏—Å—å–º–∞", 
            "endpoint": "/features/cover_letter/generate"
        },
        "gap_analyzer": {
            "enabled": True,
            "description": "–ê–Ω–∞–ª–∏–∑ –ø—Ä–æ–±–µ–ª–æ–≤ –≤ –Ω–∞–≤—ã–∫–∞—Ö",
            "endpoint": "/features/gap_analyzer/generate"
        },
        "interview_checklist": {
            "enabled": False,  # –û—Ç–∫–ª—é—á–µ–Ω–æ –¥–ª—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏
            "description": "–ß–µ–∫–ª–∏—Å—Ç –¥–ª—è –ø–æ–¥–≥–æ—Ç–æ–≤–∫–∏ –∫ –∏–Ω—Ç–µ—Ä–≤—å—é",
            "endpoint": "/features/interview_checklist/generate"
        },
        "interview_simulation": {
            "enabled": True,
            "description": "–°–∏–º—É–ª—è—Ü–∏—è –∏–Ω—Ç–µ—Ä–≤—å—é",
            "endpoint": "/features/interview_simulation/generate"
        }
    }
    
    # –¢–µ—Å—Ç–æ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å (–ø–µ—Ä–µ–∑–∞–ø–∏—Å—ã–≤–∞–µ—Ç—Å—è –ø—Ä–∏ –∫–∞–∂–¥–æ–º –∑–∞–ø—É—Å–∫–µ)
    TEST_USER = {
        "email": "demo_user@testapp.com",
        "password": "demo123",
        "org_name": "Demo Test Organization"
    }
    
    # –¢–µ—Å—Ç–æ–≤–∞—è –≤–∞–∫–∞–Ω—Å–∏—è –¥–ª—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏
    TEST_VACANCY_URL = "https://hh.ru/vacancy/12345678"
    
    def __init__(self, base_url: str):
        self.base_url = base_url
        self.email = self.TEST_USER["email"]
        self.password = self.TEST_USER["password"] 
        self.org_name = self.TEST_USER["org_name"]
        
        # HTTP –∫–ª–∏–µ–Ω—Ç —Å timeout –∏ —Ä–µ–¥–∏—Ä–µ–∫—Ç–∞–º–∏
        self.client = httpx.Client(base_url=base_url, timeout=45.0, follow_redirects=True)
        
    def __enter__(self):
        return self
        
    def __exit__(self, exc_type, exc_val, exc_tb):
        _ = exc_type, exc_val, exc_tb  # Suppress unused parameter warnings
        if hasattr(self, 'client'):
            self.client.close()
    
    def _load_test_data(self) -> tuple[Dict[str, Any], Dict[str, Any]]:
        """–ó–∞–≥—Ä—É–∂–∞–µ—Ç —Ç–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ —Ä–µ–∑—é–º–µ –∏ –≤–∞–∫–∞–Ω—Å–∏–∏."""
        test_data_dir = Path("tests/data")
        
        with (test_data_dir / "simple_resume.json").open("r", encoding="utf-8") as f:
            resume_data = json.load(f)
        with (test_data_dir / "simple_vacancy.json").open("r", encoding="utf-8") as f:
            vacancy_data = json.load(f)
        
        return resume_data, vacancy_data
    
    def _find_feature_result_file(self, feature: str) -> Path | None:
        """–ù–∞—Ö–æ–¥–∏—Ç —Ñ–∞–π–ª —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–º —Ñ–∏—á–∏ –ø–æ —à–∞–±–ª–æ–Ω—É feature_result_*.json"""
        test_data_dir = Path("tests/data")
        
        # –ò—Å–ø—Ä–∞–≤–ª—è–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ –¥–ª—è gap_analyzer
        search_name = "gap_analysis" if feature == "gap_analyzer" else feature
        pattern = f"{search_name}_result_*.json"
        
        # –ò—â–µ–º —Ñ–∞–π–ª—ã –ø–æ –ø–∞—Ç—Ç–µ—Ä–Ω—É
        matching_files = list(test_data_dir.glob(pattern))
        
        if matching_files:
            return matching_files[0]  # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –ø–µ—Ä–≤—ã–π –Ω–∞–π–¥–µ–Ω–Ω—ã–π
        
        return None
    
    def _show_feature_result_preview(self, feature: str, result_data: Dict[str, Any]) -> None:
        """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –∫—Ä–∞—Ç–∫–∏–π –ø—Ä–µ–≤—å—é —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ —Ñ–∏—á–∏."""
        print("\nüìä Result preview:")
        
        if feature == "cover_letter":
            subject = result_data.get('subject_line', 'N/A')
            content = result_data.get('content', '')
            print(f"   üìß Subject: {subject}")
            print(f"   üìù Length: {len(content)} chars")
            
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–µ 3 —Å—Ç—Ä–æ–∫–∏ —Å–æ–¥–µ—Ä–∂–∞–Ω–∏—è
            if content:
                lines = content.split('\n')[:3]
                print("   üìÑ First lines:")
                for i, line in enumerate(lines, 1):
                    if line.strip():
                        print(f"      {i}. {line.strip()[:100]}{'...' if len(line.strip()) > 100 else ''}")
                        
        elif feature == "gap_analyzer":
            gaps = result_data.get('skill_gaps', [])
            recommendations = result_data.get('recommendations', [])
            print(f"   üìà Skill gaps found: {len(gaps)}")
            print(f"   üéØ Recommendations: {len(recommendations)}")
            
            if gaps:
                print("   üîç Top gaps:")
                for i, gap in enumerate(gaps[:3], 1):
                    skill_name = gap.get('skill_name', 'Unknown')
                    importance = gap.get('importance_level', 'N/A')
                    print(f"      {i}. {skill_name} (importance: {importance})")
                    
        elif feature == "interview_checklist":
            questions = result_data.get('questions', [])
            tips = result_data.get('preparation_tips', [])
            print(f"   ‚ùì Questions generated: {len(questions)}")
            print(f"   üí° Preparation tips: {len(tips)}")
            
            if questions:
                print("   üìù Sample questions:")
                for i, q in enumerate(questions[:3], 1):
                    question = q.get('question', 'N/A') if isinstance(q, dict) else str(q)
                    print(f"      {i}. {question[:80]}{'...' if len(question) > 80 else ''}")
                    
        elif feature == "interview_simulation":
            rounds = result_data.get('total_rounds_completed', 0)
            scenarios = result_data.get('scenarios', [])
            print(f"   üí¨ Interview rounds: {rounds}")
            print(f"   üé≠ Scenarios: {len(scenarios)}")
            
            if scenarios:
                print("   üó∫Ô∏è Sample scenarios:")
                for i, scenario in enumerate(scenarios[:2], 1):
                    name = scenario.get('scenario_name', 'Unknown') if isinstance(scenario, dict) else 'Unknown'
                    print(f"      {i}. {name}")
    
    def _setup_test_user(self) -> bool:
        """–ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ—Ç —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (–ø–µ—Ä–µ–∑–∞–ø–∏—Å—ã–≤–∞–µ—Ç –µ—Å–ª–∏ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç)."""
        print("\n[Setup] üë§ Setting up test user...")
        
        # –ü—Ä–æ–±—É–µ–º –≤–æ–π—Ç–∏
        login_response = self.client.post("/auth/login", json={
            "email": self.email,
            "password": self.password
        })
        
        if login_response.status_code == 200:
            print("‚ÑπÔ∏è Test user exists, overwriting with new session...")
            return True
        else:
            # –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –Ω–æ–≤–æ–≥–æ
            signup_response = self.client.post("/auth/signup", json={
                "email": self.email,
                "password": self.password,
                "org_name": self.org_name
            })
            
            if signup_response.status_code == 200:
                print("‚úÖ Test user created successfully")
                return True
            elif signup_response.status_code == 409:
                # –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å—É—â–µ—Å—Ç–≤—É–µ—Ç, –ª–æ–≥–∏–Ω–∏–º—Å—è
                login_response = self.client.post("/auth/login", json={
                    "email": self.email,
                    "password": self.password
                })
                if login_response.status_code == 200:
                    print("‚úÖ Test user logged in successfully")
                    return True
            
            print("‚ùå Test user setup failed:", signup_response.status_code)
            return False
    
    def scenario_test_user_setup(self) -> int:
        """–°—Ü–µ–Ω–∞—Ä–∏–π: –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        print("üë§ TEST USER SETUP DEMO")
        print(f"Base URL: {self.base_url}")
        print(f"Test User Email: {self.email}")
        print("=" * 60)
        
        if not self._setup_test_user():
            return 1
        
        # –ü–æ–ª—É—á–∞–µ–º –ø—Ä–æ—Ñ–∏–ª—å
        me_response = self.client.get("/me")
        if me_response.status_code == 200:
            profile = me_response.json()
            print(f"\n‚úÖ Test user profile:")
            print(f"   Email: {profile['user']['email']}")
            print(f"   User ID: {profile['user']['id']}")
            print(f"   Organization: {profile.get('org_id', 'N/A')}")
            
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –¥–æ—Å—Ç—É–ø–Ω—ã–µ —Ñ–∏—á–∏
            print(f"\nüß† Available features for this user:")
            enabled_features = [name for name, config in self.AVAILABLE_FEATURES.items() if config["enabled"]]
            disabled_features = [name for name, config in self.AVAILABLE_FEATURES.items() if not config["enabled"]]
            
            print(f"   ‚úÖ Enabled: {', '.join(enabled_features)}")
            print(f"   ‚ùå Disabled: {', '.join(disabled_features)}")
            
            return 0
        else:
            print("‚ùå Failed to get user profile")
            return 1
    
    def scenario_hh_auth_demo(self) -> int:
        """–°—Ü–µ–Ω–∞—Ä–∏–π: HH –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –¥–ª—è —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        print("üîó HH AUTHORIZATION DEMO")
        print(f"Base URL: {self.base_url}")
        print(f"Test User: {self.email}")
        print("=" * 60)
        
        # –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        if not self._setup_test_user():
            return 1
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å HH
        print("\n[1] üîç Checking HH connection status...")
        hh_status_response = self.client.get("/auth/hh/status")
        
        if hh_status_response.status_code == 200:
            status_data = hh_status_response.json()
            print(f"üìä HH Status: {status_data}")
            
            if status_data.get("is_connected"):
                print("‚úÖ HH already connected!")
                return 0
            else:
                print("‚ö†Ô∏è HH not connected, starting OAuth...")
        else:
            print(f"‚ö†Ô∏è Unable to check HH status: {hh_status_response.status_code}")
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º HH OAuth
        print("\n[2] üåê Starting HH OAuth process...")
        hh_connect_response = self.client.get("/auth/hh/connect")
        
        if hh_connect_response.status_code == 200:
            connect_data = hh_connect_response.json()
            oauth_url = connect_data["auth_url"]
            
            print(f"üîó OAuth URL: {oauth_url}")
            print("\nüì± Opening browser for HH authorization...")
            webbrowser.open(oauth_url)
            
            print("‚è≥ Complete the authorization in the browser")
            input("Press Enter after completing HH OAuth...")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ñ–∏–Ω–∞–ª—å–Ω—ã–π —Å—Ç–∞—Ç—É—Å
            print("\n[3] ‚úÖ Verifying HH connection...")
            final_status_response = self.client.get("/auth/hh/status")
            
            if final_status_response.status_code == 200:
                final_status = final_status_response.json()
                if final_status.get("is_connected"):
                    print("‚úÖ HH successfully connected!")
                    return 0
                else:
                    print("‚ö†Ô∏è HH connection not completed")
                    return 1
            else:
                print("‚ö†Ô∏è Unable to verify HH connection status")
                return 1
        else:
            print(f"‚ùå Failed to start HH OAuth: {hh_connect_response.status_code}")
            return 1
    
    def scenario_feature_with_hash(self, feature: str) -> int:
        """–°—Ü–µ–Ω–∞—Ä–∏–π: –ó–∞–ø—É—Å–∫ —Ñ–∏—á–∏ —Å –ø–æ–¥–≥—Ä—É–∑–∫–æ–π –æ–±—ä–µ–∫—Ç–æ–≤ –ø–æ —Ö–µ—à—É"""
        print(f"üîÑ FEATURE WITH HASH DEMO: {feature}")
        print(f"Base URL: {self.base_url}")
        print(f"Test User: {self.email}")
        print("=" * 60)
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å —Ñ–∏—á–∏
        if not self.AVAILABLE_FEATURES.get(feature, {}).get("enabled", False):
            print(f"‚ùå Feature '{feature}' is not enabled for test user")
            enabled_features = [name for name, config in self.AVAILABLE_FEATURES.items() if config["enabled"]]
            print(f"üí° Available features: {', '.join(enabled_features)}")
            return 1
        
        # –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        if not self._setup_test_user():
            return 1
        
        print("\n[1] üìÅ Creating session to save objects in DB...")
        resume_data, vacancy_data = self._load_test_data()
        
        # –°–æ–∑–¥–∞–µ–º –ø–µ—Ä–≤—É—é —Å–µ—Å—Å–∏—é –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Ö–µ—à–µ–π
        initial_session_response = self.client.post("/sessions/init_json", json={
            "resume": resume_data,
            "vacancy": vacancy_data,
            "reuse_by_hash": True
        })
        
        if initial_session_response.status_code != 200:
            print(f"‚ùå Initial session creation failed: {initial_session_response.status_code}")
            if initial_session_response.status_code == 401:
                print("   ‚ö†Ô∏è Requires HH authorization - run 'hh-auth-demo' first")
            return 1
        
        initial_session = initial_session_response.json()
        print(f"‚úÖ Initial session created: {initial_session['session_id']}")
        
        print("\n[2] üîÑ Creating second session (should reuse objects by hash)...")
        
        # –°–æ–∑–¥–∞–µ–º –≤—Ç–æ—Ä—É—é —Å–µ—Å—Å–∏—é - –¥–æ–ª–∂–Ω–∞ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —Ö–µ—à–∏
        hash_session_response = self.client.post("/sessions/init_json", json={
            "resume": resume_data,
            "vacancy": vacancy_data,
            "reuse_by_hash": True
        })
        
        if hash_session_response.status_code == 200:
            hash_session = hash_session_response.json()
            print(f"‚úÖ Hash-based session created: {hash_session['session_id']}")
            print(f"üìä Resume reused: {hash_session['reused']['resume']}")
            print(f"üìä Vacancy reused: {hash_session['reused']['vacancy']}")
            
            if hash_session['reused']['resume'] and hash_session['reused']['vacancy']:
                print("\nüéâ SUCCESS: Objects loaded from DB by hash!")
            else:
                print("\n‚ö†Ô∏è Hash reuse partially worked")
        else:
            print(f"‚ùå Hash session creation failed: {hash_session_response.status_code}")
            return 1
        
        print(f"\n[3] üöÄ Simulating {feature} execution with hash-loaded objects...")
        
        # –ò–º–∏—Ç–∏—Ä—É–µ–º –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ —Ñ–∏—á–∏ (–∑–∞–≥—Ä—É–∂–∞–µ–º –≥–æ—Ç–æ–≤—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç)
        result_file = self._find_feature_result_file(feature)
        if result_file:
            with result_file.open("r", encoding="utf-8") as f:
                mock_result = json.load(f)
            
            print(f"‚úÖ Feature {feature} completed successfully!")
            self._show_feature_result_preview(feature, mock_result)
            print(f"\nüìÅ Full result loaded from: {result_file}")
            return 0
        else:
            print(f"‚ùå Test data not found for feature: {feature}")
            return 1
    
    def scenario_feature_no_hash(self, feature: str) -> int:
        """–°—Ü–µ–Ω–∞—Ä–∏–π: –ó–∞–ø—É—Å–∫ —Ñ–∏—á–∏ —Å –ø–∞—Ä—Å–∏–Ω–≥–æ–º (–∫–æ–≥–¥–∞ —Ö–µ—à –Ω–µ –Ω–∞–π–¥–µ–Ω)"""
        print(f"üîç FEATURE WITHOUT HASH DEMO: {feature}")
        print(f"Base URL: {self.base_url}")
        print(f"Test User: {self.email}")
        print("=" * 60)
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å —Ñ–∏—á–∏
        if not self.AVAILABLE_FEATURES.get(feature, {}).get("enabled", False):
            print(f"‚ùå Feature '{feature}' is not enabled for test user")
            enabled_features = [name for name, config in self.AVAILABLE_FEATURES.items() if config["enabled"]]
            print(f"üí° Available features: {', '.join(enabled_features)}")
            return 1
        
        # –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        if not self._setup_test_user():
            return 1
        
        print("\n[1] üìÑ Creating session via init_upload (simulates parsing)...")
        
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º init_upload –¥–ª—è –∏–º–∏—Ç–∞—Ü–∏–∏ –ø–∞—Ä—Å–∏–Ω–≥–∞
        test_pdf_path = Path("tests/data/resume.pdf")
        if not test_pdf_path.exists():
            print(f"‚ùå Test PDF not found: {test_pdf_path}")
            print("üí° Using init_json as fallback...")
            
            # Fallback –∫ init_json —Å –æ—Ç–∫–ª—é—á–µ–Ω–Ω–æ–π –¥–µ–¥—É–ø–ª–∏–∫–∞—Ü–∏–µ–π
            resume_data, vacancy_data = self._load_test_data()
            upload_session_response = self.client.post("/sessions/init_json", json={
                "resume": resume_data,
                "vacancy": vacancy_data,
                "reuse_by_hash": False  # –û—Ç–∫–ª—é—á–∞–µ–º –¥–µ–¥—É–ø–ª–∏–∫–∞—Ü–∏—é
            })
        else:
            # –ù–∞—Å—Ç–æ—è—â–∏–π init_upload
            with open(test_pdf_path, "rb") as pdf_file:
                upload_session_response = self.client.post("/sessions/init_upload", data={
                    "vacancy_url": self.TEST_VACANCY_URL,
                    "reuse_by_hash": False,  # –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω—ã–π –ø–∞—Ä—Å–∏–Ω–≥
                    "ttl_sec": 3600
                }, files={
                    "resume_file": ("resume.pdf", pdf_file, "application/pdf")
                })
        
        if upload_session_response.status_code == 200:
            upload_session = upload_session_response.json()
            print(f"‚úÖ Upload session created: {upload_session['session_id']}")
            print(f"üìä Resume reused: {upload_session['reused']['resume']} (should be False)")
            print(f"üìä Vacancy reused: {upload_session['reused']['vacancy']} (should be False)")
            
            if not upload_session['reused']['resume'] and not upload_session['reused']['vacancy']:
                print("\nüéâ SUCCESS: Objects were freshly parsed (no hash reuse)!")
            else:
                print("\n‚ö†Ô∏è Unexpected: some objects were reused despite reuse_by_hash=False")
        elif upload_session_response.status_code == 401:
            print("‚ùå Upload session creation failed: HH authorization required")
            print("   üí° Run 'hh-auth-demo' first")
            return 1
        else:
            print(f"‚ùå Upload session creation failed: {upload_session_response.status_code}")
            return 1
        
        print(f"\n[2] üöÄ Simulating {feature} execution with freshly parsed objects...")
        
        # –ò–º–∏—Ç–∏—Ä—É–µ–º –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ —Ñ–∏—á–∏ (–∑–∞–≥—Ä—É–∂–∞–µ–º –≥–æ—Ç–æ–≤—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç)
        result_file = self._find_feature_result_file(feature)
        if result_file:
            with result_file.open("r", encoding="utf-8") as f:
                mock_result = json.load(f)
            
            print(f"‚úÖ Feature {feature} completed successfully!")
            self._show_feature_result_preview(feature, mock_result)
            print(f"\nüìÅ Full result loaded from: {result_file}")
            return 0
        else:
            print(f"‚ùå Test data not found for feature: {feature}")
            return 1
    
    def scenario_full_demo(self) -> int:
        """–°—Ü–µ–Ω–∞—Ä–∏–π: –ü–æ–ª–Ω–∞—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è –≤—Å–µ—Ö –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–µ–π"""
        print("üöÄ FULL STACK DEMO")
        print(f"Base URL: {self.base_url}")
        print(f"Test User: {self.email}")
        print("=" * 60)
        
        print("\nüéØ Demo Plan:")
        print("1. Setup test user")
        print("2. Show available features")
        print("3. HH authorization")
        print("4. Feature with hash reuse")
        print("5. Feature without hash (parsing)")
        print("=" * 60)
        
        # –≠—Ç–∞–ø 1: –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        print("\n[STEP 1] üë§ Test User Setup...")
        if not self._setup_test_user():
            return 1
        
        # –≠—Ç–∞–ø 2: –ü–æ–∫–∞–∑ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Ñ–∏—á
        print("\n[STEP 2] üìã Available Features...")
        enabled_features = [name for name, config in self.AVAILABLE_FEATURES.items() if config["enabled"]]
        print(f"‚úÖ Enabled features: {', '.join(enabled_features)}")
        
        # –≠—Ç–∞–ø 3: HH –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)
        print("\n[STEP 3] üîó HH Authorization...")
        hh_status_response = self.client.get("/auth/hh/status")
        if hh_status_response.status_code == 200:
            status_data = hh_status_response.json()
            if not status_data.get("is_connected"):
                print("‚ö†Ô∏è HH not connected. For full demo, please run:")
                print(f"   python examples/unified_demo_improved.py --scenario hh-auth-demo")
                print("‚è© Skipping HH-dependent steps...")
                return 0
            else:
                print("‚úÖ HH already connected!")
        
        # –≠—Ç–∞–ø 4: –§–∏—á–∞ —Å —Ö–µ—à–µ–º
        print("\n[STEP 4] üîÑ Feature with Hash Reuse...")
        test_feature = enabled_features[0] if enabled_features else "cover_letter"
        result = self.scenario_feature_with_hash(test_feature)
        if result != 0:
            print(f"‚ö†Ô∏è Hash demo failed, but continuing...")
        
        # –≠—Ç–∞–ø 5: –§–∏—á–∞ –±–µ–∑ —Ö–µ—à–∞
        print("\n[STEP 5] üîç Feature without Hash (Parsing)...")
        result = self.scenario_feature_no_hash(test_feature)
        if result != 0:
            print(f"‚ö†Ô∏è No-hash demo failed, but demo completed...")
        
        print("\n" + "=" * 60)
        print("üéâ FULL DEMO COMPLETED!")
        print("=" * 60)
        return 0


def main(argv: list[str]) -> int:
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–ø—É—Å–∫–∞ –¥–µ–º–æ-—Å—Ü–µ–Ω–∞—Ä–∏–µ–≤."""
    parser = argparse.ArgumentParser(
        description="Improved Unified Demo - —Ä–µ–∞–ª–∏—Å—Ç–∏—á–Ω—ã–µ —Å—Ü–µ–Ω–∞—Ä–∏–∏ —Å —Ç–µ—Å—Ç–æ–≤—ã–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º",
        formatter_class=argparse.RawDescriptionHelpFormatter,
        epilog="""
–ü–†–ò–ú–ï–†–´ –ò–°–ü–û–õ–¨–ó–û–í–ê–ù–ò–Ø:

1. –ü–æ–ª–Ω–∞—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è –≤—Å–µ—Ö –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–µ–π:
   python examples/unified_demo_improved.py --scenario full-demo

2. –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:
   python examples/unified_demo_improved.py --scenario test-user-setup

3. HH –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è:
   python examples/unified_demo_improved.py --scenario hh-auth-demo

4. –§–∏—á–∞ —Å –∑–∞–≥—Ä—É–∑–∫–æ–π –ø–æ —Ö–µ—à—É:
   python examples/unified_demo_improved.py --scenario feature-with-hash --feature cover_letter

5. –§–∏—á–∞ —Å –ø–∞—Ä—Å–∏–Ω–≥–æ–º (–±–µ–∑ —Ö–µ—à–∞):
   python examples/unified_demo_improved.py --scenario feature-no-hash --feature gap_analyzer

–û–°–û–ë–ï–ù–ù–û–°–¢–ò:
- –¢–µ—Å—Ç–æ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: demo_user@testapp.com (–ø–µ—Ä–µ–∑–∞–ø–∏—Å—ã–≤–∞–µ—Ç—Å—è –ø—Ä–∏ –∫–∞–∂–¥–æ–º –∑–∞–ø—É—Å–∫–µ)
- –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º—ã–µ –ø—Ä–∞–≤–∞ –¥–æ—Å—Ç—É–ø–∞ –∫ —Ñ–∏—á–∞–º –≤ –∫–æ–¥–µ
- –†–µ–∞–ª–∏—Å—Ç–∏—á–Ω–∞—è –∏–º–∏—Ç–∞—Ü–∏—è —Ö–µ—à-–¥–µ–¥—É–ø–ª–∏–∫–∞—Ü–∏–∏
- –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è /sessions/init_upload vs /sessions/init_json

–ü–†–ï–î–í–ê–†–ò–¢–ï–õ–¨–ù–´–ï –¢–†–ï–ë–û–í–ê–ù–ò–Ø:
- –ó–∞–ø—É—â–µ–Ω–Ω–æ–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ: uvicorn src.webapp.app:app --host 0.0.0.0 --port 8080
- –ù–∞—Å—Ç—Ä–æ–µ–Ω–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è –¥–ª—è HH API
- –¢–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ –≤ tests/data/
        """
    )
    
    parser.add_argument(
        "--scenario", 
        required=True,
        choices=["full-demo", "test-user-setup", "hh-auth-demo", "feature-with-hash", "feature-no-hash"],
        help="–í—ã–±–µ—Ä–∏—Ç–µ —Å—Ü–µ–Ω–∞—Ä–∏–π –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏"
    )
    parser.add_argument(
        "--base-url", 
        default="http://localhost:8080",
        help="Base URL –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é: http://localhost:8080)"
    )
    parser.add_argument(
        "--feature", 
        choices=["cover_letter", "gap_analyzer", "interview_checklist", "interview_simulation"],
        help="–§–∏—á–∞ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è (–¥–ª—è feature-* —Å—Ü–µ–Ω–∞—Ä–∏–µ–≤)"
    )
    
    args = parser.parse_args(argv)
    
    # –í–∞–ª–∏–¥–∞—Ü–∏—è –∞—Ä–≥—É–º–µ–Ω—Ç–æ–≤
    if args.scenario in ["feature-with-hash", "feature-no-hash"] and not args.feature:
        print(f"‚ùå Scenario '{args.scenario}' requires --feature parameter")
        return 1
    
    # –ó–∞–ø—É—Å–∫ –¥–µ–º–æ
    with ImprovedUnifiedDemo(args.base_url) as demo:
        if args.scenario == "full-demo":
            return demo.scenario_full_demo()
        elif args.scenario == "test-user-setup":
            return demo.scenario_test_user_setup()
        elif args.scenario == "hh-auth-demo":
            return demo.scenario_hh_auth_demo()
        elif args.scenario == "feature-with-hash":
            return demo.scenario_feature_with_hash(args.feature)
        elif args.scenario == "feature-no-hash":
            return demo.scenario_feature_no_hash(args.feature)
        else:
            print(f"‚ùå Unknown scenario: {args.scenario}")
            return 1


if __name__ == "__main__":
    raise SystemExit(main(sys.argv[1:]))