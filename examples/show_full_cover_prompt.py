# examples/show_full_prompt.py
# --- agent_meta ---
# role: llm-cover-letter-prompt-demo
# owner: @backend
# contract: –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è –ø–æ–ª–Ω–æ–≥–æ –ø—Ä–æ–º–ø—Ç–∞ –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Å–æ–ø—Ä–æ–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ–≥–æ –ø–∏—Å—å–º–∞
# last_reviewed: 2025-08-14
# interfaces:
#   - main(): –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è –ø—Ä–æ–º–ø—Ç–∞ —Å —Ç–µ—Å—Ç–æ–≤—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏
# --- /agent_meta ---

import json
import sys
from pathlib import Path

# –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç—å –∫ –∫–æ—Ä–Ω—é –ø—Ä–æ–µ–∫—Ç–∞ –¥–ª—è –∏–º–ø–æ—Ä—Ç–æ–≤
sys.path.insert(0, str(Path(__file__).parent.parent))

from src.models.resume_models import ResumeInfo
from src.models.vacancy_models import VacancyInfo
from src.llm_cover_letter.options import CoverLetterOptions
from src.llm_cover_letter.models import RoleType
from src.llm_cover_letter.prompts.builders import DefaultContextBuilder, DefaultPromptBuilder
from src.llm_cover_letter.formatter import format_resume_for_cover_letter, format_vacancy_for_cover_letter


def load_test_data():
    """–ó–∞–≥—Ä—É–∑–∏—Ç—å —Ç–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ –∏–∑ JSON —Ñ–∞–π–ª–æ–≤."""
    data_dir = Path(__file__).parent.parent / "tests" / "data"
    
    # –ó–∞–≥—Ä—É–∑–∫–∞ —Ä–µ–∑—é–º–µ (—É–ø—Ä–æ—â–µ–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è)
    with open(data_dir / "simple_resume.json", "r", encoding="utf-8") as f:
        resume_data = json.load(f)
    resume = ResumeInfo(**resume_data)
    
    # –ó–∞–≥—Ä—É–∑–∫–∞ –≤–∞–∫–∞–Ω—Å–∏–∏ (—É–ø—Ä–æ—â–µ–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è)
    with open(data_dir / "simple_vacancy.json", "r", encoding="utf-8") as f:
        vacancy_data = json.load(f)
    vacancy = VacancyInfo(**vacancy_data)
    
    return resume, vacancy


def demonstrate_prompt(prompt_version="cover_letter.v2", role_hint=None, extra_context=None):
    """–î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è –ø–æ–ª–Ω–æ–≥–æ –ø—Ä–æ–º–ø—Ç–∞."""
    print(f"=== –î–ï–ú–û–ù–°–¢–†–ê–¶–ò–Ø –ü–û–õ–ù–û–ì–û –ü–†–û–ú–ü–¢–ê ({prompt_version}) ===\n")
    
    # –ó–∞–≥—Ä—É–∂–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ
    resume, vacancy = load_test_data()
    
    # –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏
    options = CoverLetterOptions(
        prompt_version=prompt_version,
        role_hint=role_hint,
        language="ru",
        length="MEDIUM",
        extra_context=extra_context
    )
    
    print("üìã –ò–°–•–û–î–ù–´–ï –î–ê–ù–ù–´–ï:")
    print(f"–†–µ–∑—é–º–µ: {resume.first_name} {resume.last_name} - {resume.title}")
    print(f"–í–∞–∫–∞–Ω—Å–∏—è: {vacancy.name}")
    print(f"–û–ø—Ü–∏–∏: version={options.prompt_version}, role_hint={options.role_hint}")
    if options.extra_context:
        print(f"–î–æ–ø. –∫–æ–Ω—Ç–µ–∫—Å—Ç: {options.extra_context}")
    print()
    
    # –ü–æ—Å—Ç—Ä–æ–µ–Ω–∏–µ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞
    context_builder = DefaultContextBuilder()
    ctx = context_builder.build(resume, vacancy, options)
    
    print("üîß –ü–û–°–¢–†–û–ï–ù–ù–´–ô –ö–û–ù–¢–ï–ö–°–¢:")
    for key, value in ctx.items():
        if key in ["company_tone_instruction", "role_adaptation_instruction"]:
            print(f"{key}: {value[:100]}...")
        else:
            print(f"{key}: {value}")
    print()
    
    # –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –±–ª–æ–∫–æ–≤
    resume_block = format_resume_for_cover_letter(resume)
    vacancy_block = format_vacancy_for_cover_letter(vacancy)
    
    print("üìÑ –§–û–†–ú–ê–¢–ò–†–û–í–ê–ù–ù–´–ï –ë–õ–û–ö–ò:")
    print(f"Resume block: {len(resume_block)} —Å–∏–º–≤–æ–ª–æ–≤")
    print(f"Vacancy block: {len(vacancy_block)} —Å–∏–º–≤–æ–ª–æ–≤")
    print()
    
    # –°–±–æ—Ä–∫–∞ –ø—Ä–æ–º–ø—Ç–∞
    prompt_builder = DefaultPromptBuilder()
    prompt = prompt_builder.build(
        resume_block=resume_block,
        vacancy_block=vacancy_block,
        ctx=ctx,
        options=options
    )
    
    print("=" * 80)
    print("üéØ –§–ò–ù–ê–õ–¨–ù–´–ô SYSTEM PROMPT:")
    print("=" * 80)
    print(prompt.system)
    print()
    
    print("=" * 80)
    print("üéØ –§–ò–ù–ê–õ–¨–ù–´–ô USER PROMPT:")
    print("=" * 80)
    print(prompt.user[:20000] + "..." if len(prompt.user) > 20000 else prompt.user)
    print()
    
    print("üìä –°–¢–ê–¢–ò–°–¢–ò–ö–ê:")
    print(f"System prompt: {len(prompt.system)} —Å–∏–º–≤–æ–ª–æ–≤")
    print(f"User prompt: {len(prompt.user)} —Å–∏–º–≤–æ–ª–æ–≤")
    print(f"–û–±—â–∏–π —Ä–∞–∑–º–µ—Ä: {len(prompt.system) + len(prompt.user)} —Å–∏–º–≤–æ–ª–æ–≤")


def main():
    """–î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è —Ä–∞–∑–ª–∏—á–Ω—ã—Ö –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤ –ø—Ä–æ–º–ø—Ç–æ–≤."""
    
    # 1. –ë–∞–∑–æ–≤–∞—è –≤–µ—Ä—Å–∏—è v1
    print("1Ô∏è‚É£ –ë–ê–ó–û–í–ê–Ø –í–ï–†–°–ò–Ø V1")
    demonstrate_prompt(
        prompt_version="cover_letter.v1", 
        role_hint=RoleType.ML_ENGINEER
    )
    
    print("\n" + "="*100 + "\n")
    
    # 2. –£–ª—É—á—à–µ–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è v2
    print("2Ô∏è‚É£ –£–õ–£–ß–®–ï–ù–ù–ê–Ø –í–ï–†–°–ò–Ø V2")
    demonstrate_prompt(
        prompt_version="cover_letter.v2", 
        role_hint=RoleType.DATA_SCIENTIST
    )
    
    print("\n" + "="*100 + "\n")
    
    # 3. –° –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–º –∫–æ–Ω—Ç–µ–∫—Å—Ç–æ–º
    print("3Ô∏è‚É£ –° –î–û–ü–û–õ–ù–ò–¢–ï–õ–¨–ù–´–ú –ö–û–ù–¢–ï–ö–°–¢–û–ú")
    demonstrate_prompt(
        prompt_version="cover_letter.v2",
        role_hint=RoleType.ML_ENGINEER,
        extra_context={
            "deadline": "—Å—Ä–æ—á–Ω–æ, –Ω–∞—á–∞–ª–æ –≤ —Ç–µ—á–µ–Ω–∏–µ –Ω–µ–¥–µ–ª–∏",
            "remote": "–ø–æ–ª–Ω–∞—è —É–¥–∞–ª–µ–Ω–∫–∞",
            "team_size": "–∫–æ–º–∞–Ω–¥–∞ 5 —á–µ–ª–æ–≤–µ–∫"
        }
    )
    
    print("\n" + "="*100 + "\n")
    
    # 4. –ê–≤—Ç–æ–æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Ä–æ–ª–∏
    print("4Ô∏è‚É£ –ê–í–¢–û–û–ü–†–ï–î–ï–õ–ï–ù–ò–ï –†–û–õ–ò (role_hint=None)")
    demonstrate_prompt(
        prompt_version="cover_letter.v2",
        role_hint=None  # –±—É–¥–µ—Ç –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–æ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –∏–∑ resume.title
    )


if __name__ == "__main__":
    main()