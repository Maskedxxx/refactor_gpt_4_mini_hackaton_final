# examples/show_full_interview_checklist_prompt.py
# --- agent_meta ---
# role: llm-interview-checklist-prompt-demo
# owner: @backend
# contract: –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è –ø–æ–ª–Ω–æ–≥–æ –ø—Ä–æ–º–ø—Ç–∞ –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω–æ–≥–æ —á–µ–∫-–ª–∏—Å—Ç–∞ –ø–æ–¥–≥–æ—Ç–æ–≤–∫–∏ –∫ –∏–Ω—Ç–µ—Ä–≤—å—é
# last_reviewed: 2025-08-18
# interfaces:
#   - main(): –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è –ø—Ä–æ–º–ø—Ç–∞ —Å —Ç–µ—Å—Ç–æ–≤—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏
# --- /agent_meta ---

import json
import sys
from pathlib import Path

# –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç—å –∫ –∫–æ—Ä–Ω—é –ø—Ä–æ–µ–∫—Ç–∞ –¥–ª—è –∏–º–ø–æ—Ä—Ç–æ–≤
sys.path.insert(0, str(Path(__file__).parent.parent))

from src.models.resume_models import ResumeInfo
from src.models.vacancy_models import VacancyInfo
from src.llm_interview_checklist.options import InterviewChecklistOptions
from src.llm_interview_checklist.models import CandidateLevel, CompanyFormat
from src.llm_interview_checklist.formatter import format_resume_for_interview_prep, format_vacancy_for_interview_prep
from src.llm_interview_checklist.prompts.templates import create_professional_interview_checklist_prompt
from src.llm_interview_checklist.prompts.mappings import (
    detect_vacancy_type_from_description,
    analyze_candidate_level,
    detect_company_format,
    get_candidate_level_guidance,
    get_vacancy_type_adaptation,
    get_company_format_adaptation,
)


def load_test_data():
    """–ó–∞–≥—Ä—É–∑–∏—Ç—å —Ç–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ –∏–∑ JSON —Ñ–∞–π–ª–æ–≤."""
    data_dir = Path(__file__).parent.parent / "tests" / "data"
    
    # –ó–∞–≥—Ä—É–∑–∫–∞ —Ä–µ–∑—é–º–µ (—É–ø—Ä–æ—â–µ–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è)
    with open(data_dir / "simple_resume.json", "r", encoding="utf-8") as f:
        resume_data = json.load(f)
    resume = ResumeInfo(**resume_data)
    
    # –ó–∞–≥—Ä—É–∑–∫–∞ –≤–∞–∫–∞–Ω—Å–∏–∏ (—É–ø—Ä–æ—â–µ–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è)
    with open(data_dir / "simple_vacancy.json", "r", encoding="utf-8") as f:
        vacancy_data = json.load(f)
    vacancy = VacancyInfo(**vacancy_data)
    
    return resume, vacancy


def demonstrate_prompt(
    prompt_version="v1", 
    candidate_level_hint=None, 
    company_format_hint=None,
    preparation_time_available=None,
    focus_areas=None,
    extra_context=None
):
    """–î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è –ø–æ–ª–Ω–æ–≥–æ –ø—Ä–æ–º–ø—Ç–∞ –¥–ª—è –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω–æ–≥–æ —á–µ–∫-–ª–∏—Å—Ç–∞ –ø–æ–¥–≥–æ—Ç–æ–≤–∫–∏ –∫ –∏–Ω—Ç–µ—Ä–≤—å—é."""
    print(f"=== –î–ï–ú–û–ù–°–¢–†–ê–¶–ò–Ø –ü–û–õ–ù–û–ì–û –ü–†–û–ú–ü–¢–ê INTERVIEW CHECKLIST ({prompt_version}) ===\n")
    
    # –ó–∞–≥—Ä—É–∂–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ
    resume, vacancy = load_test_data()
    
    # –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏
    options = InterviewChecklistOptions(
        prompt_version=prompt_version,
        candidate_level_hint=candidate_level_hint,
        company_format_hint=company_format_hint,
        preparation_time_available=preparation_time_available,
        focus_areas=focus_areas,
        extra_context=extra_context
    )
    
    print("üìã –ò–°–•–û–î–ù–´–ï –î–ê–ù–ù–´–ï:")
    print(f"–†–µ–∑—é–º–µ: {resume.first_name} {resume.last_name} - {resume.title}")
    print(f"–í–∞–∫–∞–Ω—Å–∏—è: {vacancy.name}")
    print(f"–û–ø—Ü–∏–∏: version={options.prompt_version}")
    if options.candidate_level_hint:
        print(f"–£—Ä–æ–≤–µ–Ω—å –∫–∞–Ω–¥–∏–¥–∞—Ç–∞ (–ø–æ–¥—Å–∫–∞–∑–∫–∞): {options.candidate_level_hint}")
    if options.company_format_hint:
        print(f"–§–æ—Ä–º–∞—Ç –∫–æ–º–ø–∞–Ω–∏–∏ (–ø–æ–¥—Å–∫–∞–∑–∫–∞): {options.company_format_hint}")
    if options.preparation_time_available:
        print(f"–î–æ—Å—Ç—É–ø–Ω–æ–µ –≤—Ä–µ–º—è –ø–æ–¥–≥–æ—Ç–æ–≤–∫–∏: {options.preparation_time_available}")
    if options.focus_areas:
        print(f"–û–±–ª–∞—Å—Ç–∏ —Ñ–æ–∫—É—Å–∞: {options.focus_areas}")
    if options.extra_context:
        print(f"–î–æ–ø. –∫–æ–Ω—Ç–µ–∫—Å—Ç: {options.extra_context}")
    print()
    
    # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –º–æ–¥–µ–ª–∏ –≤ —Å–ª–æ–≤–∞—Ä–∏ –¥–ª—è —Ñ–æ—Ä–º–∞—Ç—Ç–µ—Ä–æ–≤
    resume_dict = resume.model_dump()
    vacancy_dict = vacancy.model_dump()
    
    # –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –±–ª–æ–∫–æ–≤
    formatted_resume = format_resume_for_interview_prep(resume_dict)
    formatted_vacancy = format_vacancy_for_interview_prep(vacancy_dict)
    
    print("üìÑ –§–û–†–ú–ê–¢–ò–†–û–í–ê–ù–ù–´–ï –ë–õ–û–ö–ò:")
    print(f"Resume block: {len(formatted_resume)} —Å–∏–º–≤–æ–ª–æ–≤")
    print(f"Vacancy block: {len(formatted_vacancy)} —Å–∏–º–≤–æ–ª–æ–≤")
    print()
    
    # –ê–Ω–∞–ª–∏–∑ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞
    print("üîç –ê–ù–ê–õ–ò–ó –ö–û–ù–¢–ï–ö–°–¢–ê:")
    
    # –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —É—Ä–æ–≤–Ω—è –∫–∞–Ω–¥–∏–¥–∞—Ç–∞
    if options.candidate_level_hint:
        try:
            candidate_level = CandidateLevel(options.candidate_level_hint.upper())
        except ValueError:
            candidate_level = analyze_candidate_level(
                resume_dict.get('experience', []), 
                resume_dict.get('total_experience', 0)
            )
    else:
        candidate_level = analyze_candidate_level(
            resume_dict.get('experience', []), 
            resume_dict.get('total_experience', 0)
        )
    
    # –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Ç–∏–ø–∞ –≤–∞–∫–∞–Ω—Å–∏–∏
    vacancy_type = detect_vacancy_type_from_description(
        vacancy_dict.get('name', ''), 
        vacancy_dict.get('description', '')
    )
    
    # –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Ñ–æ—Ä–º–∞—Ç–∞ –∫–æ–º–ø–∞–Ω–∏–∏
    if options.company_format_hint:
        try:
            company_format = CompanyFormat(options.company_format_hint.upper())
        except ValueError:
            company_format = detect_company_format(
                vacancy_dict.get('company_name', ''), 
                vacancy_dict.get('description', '')
            )
    else:
        company_format = detect_company_format(
            vacancy_dict.get('company_name', ''), 
            vacancy_dict.get('description', '')
        )
    
    print(f"  –£—Ä–æ–≤–µ–Ω—å –∫–∞–Ω–¥–∏–¥–∞—Ç–∞: {candidate_level}")
    print(f"  –¢–∏–ø –≤–∞–∫–∞–Ω—Å–∏–∏: {vacancy_type}")
    print(f"  –§–æ—Ä–º–∞—Ç –∫–æ–º–ø–∞–Ω–∏–∏: {company_format}")
    print()
    
    # –ü–æ–ª—É—á–µ–Ω–∏–µ –∞–¥–∞–ø—Ç–∞—Ü–∏–π
    level_guidance = get_candidate_level_guidance(candidate_level)
    vacancy_adaptation = get_vacancy_type_adaptation(vacancy_type)
    company_adaptation = get_company_format_adaptation(company_format)
    
    print("üéØ –ê–î–ê–ü–¢–ê–¶–ò–ò –ü–û –ö–û–ù–¢–ï–ö–°–¢–£:")
    print(f"–£—Ä–æ–≤–µ–Ω—å - —Ñ–æ–∫—É—Å: {level_guidance['focus']}")
    print(f"–í–∞–∫–∞–Ω—Å–∏—è - –∫–ª—é—á–µ–≤—ã–µ –æ–±–ª–∞—Å—Ç–∏: {vacancy_adaptation['key_areas']}")
    print(f"–ö–æ–º–ø–∞–Ω–∏—è - –∫—É–ª—å—Ç—É—Ä–Ω—ã–π —Ñ–æ–∫—É—Å: {company_adaptation['culture_focus']}")
    print()
    
    # –°–æ–∑–¥–∞–Ω–∏–µ –ø—Ä–æ–º–ø—Ç–∞
    prompt_template = create_professional_interview_checklist_prompt(
        formatted_resume=formatted_resume,
        formatted_vacancy=formatted_vacancy,
        candidate_level=candidate_level,
        vacancy_type=vacancy_type,
        company_format=company_format,
        extra_context=options.extra_context,
    )
    
    # –†–µ–Ω–¥–µ—Ä–∏–Ω–≥ –ø—Ä–æ–º–ø—Ç–∞
    prompt = prompt_template.render({})
    
    print("=" * 80)
    print("üéØ –§–ò–ù–ê–õ–¨–ù–´–ô SYSTEM PROMPT:")
    print("=" * 80)
    print(prompt.system)
    print()
    
    print("=" * 80)
    print("üéØ –§–ò–ù–ê–õ–¨–ù–´–ô USER PROMPT:")
    print("=" * 80)
    # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –≤—ã–≤–æ–¥ –¥–ª—è —á–∏—Ç–∞–µ–º–æ—Å—Ç–∏
    user_prompt = prompt.user
    if len(user_prompt) > 15000:
        print(user_prompt[:15000] + "\n... (–æ–±—Ä–µ–∑–∞–Ω–æ –¥–ª—è —á–∏—Ç–∞–µ–º–æ—Å—Ç–∏)")
    else:
        print(user_prompt)
    print()
    
    print("üìä –°–¢–ê–¢–ò–°–¢–ò–ö–ê:")
    print(f"System prompt: {len(prompt.system)} —Å–∏–º–≤–æ–ª–æ–≤")
    print(f"User prompt: {len(prompt.user)} —Å–∏–º–≤–æ–ª–æ–≤")
    print(f"–û–±—â–∏–π —Ä–∞–∑–º–µ—Ä: {len(prompt.system) + len(prompt.user)} —Å–∏–º–≤–æ–ª–æ–≤")


def main():
    """–î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è —Ä–∞–∑–ª–∏—á–Ω—ã—Ö –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤ –ø—Ä–æ–º–ø—Ç–æ–≤ –¥–ª—è —á–µ–∫-–ª–∏—Å—Ç–∞ –ø–æ–¥–≥–æ—Ç–æ–≤–∫–∏ –∫ –∏–Ω—Ç–µ—Ä–≤—å—é."""
    
    # 1. –ë–∞–∑–æ–≤–∞—è –≤–µ—Ä—Å–∏—è –±–µ–∑ –ø–æ–¥—Å–∫–∞–∑–æ–∫
    print("1Ô∏è‚É£ –ë–ê–ó–û–í–ê–Ø –í–ï–†–°–ò–Ø –ë–ï–ó –ü–û–î–°–ö–ê–ó–û–ö (–∞–≤—Ç–æ–æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ)")
    demonstrate_prompt()
    
    print("\n" + "="*100 + "\n")
    
    # 2. –° –ø–æ–¥—Å–∫–∞–∑–∫–æ–π —É—Ä–æ–≤–Ω—è –∫–∞–Ω–¥–∏–¥–∞—Ç–∞
    print("2Ô∏è‚É£ –° –ü–û–î–°–ö–ê–ó–ö–û–ô –£–†–û–í–ù–Ø –ö–ê–ù–î–ò–î–ê–¢–ê (SENIOR)")
    demonstrate_prompt(
        candidate_level_hint="SENIOR"
    )
    
    print("\n" + "="*100 + "\n")
    
    # 3. –° –ø–æ–¥—Å–∫–∞–∑–∫–æ–π —Ñ–æ—Ä–º–∞—Ç–∞ –∫–æ–º–ø–∞–Ω–∏–∏
    print("3Ô∏è‚É£ –° –ü–û–î–°–ö–ê–ó–ö–û–ô –§–û–†–ú–ê–¢–ê –ö–û–ú–ü–ê–ù–ò–ò (STARTUP)")
    demonstrate_prompt(
        company_format_hint="STARTUP",
        preparation_time_available="1 –Ω–µ–¥–µ–ª—è"
    )
    
    print("\n" + "="*100 + "\n")
    
    # 4. –ü–æ–ª–Ω–∞—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è —Å —Ñ–æ–∫—É—Å–Ω—ã–º–∏ –æ–±–ª–∞—Å—Ç—è–º–∏
    print("4Ô∏è‚É£ –ü–û–õ–ù–ê–Ø –ö–û–ù–§–ò–ì–£–†–ê–¶–ò–Ø –° –§–û–ö–£–°–ù–´–ú–ò –û–ë–õ–ê–°–¢–Ø–ú–ò")
    demonstrate_prompt(
        candidate_level_hint="MIDDLE",
        company_format_hint="LARGE_CORP",
        preparation_time_available="2 –Ω–µ–¥–µ–ª–∏",
        focus_areas=["—Å–∏—Å—Ç–µ–º–Ω—ã–π –¥–∏–∑–∞–π–Ω", "–∞–ª–≥–æ—Ä–∏—Ç–º—ã", "–ø–æ–≤–µ–¥–µ–Ω—á–µ—Å–∫–∏–µ –≤–æ–ø—Ä–æ—Å—ã"],
        extra_context={
            "interview_format": "–æ–Ω–ª–∞–π–Ω",
            "team_info": "–∫–æ–º–∞–Ω–¥–∞ backend —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏ –∏–∑ 8 —á–µ–ª–æ–≤–µ–∫",
            "project_type": "high-load —Å–∏—Å—Ç–µ–º–∞ –ø–ª–∞—Ç–µ–∂–µ–π"
        }
    )
    
    print("\n" + "="*100 + "\n")
    
    # 5. Junior —Å –º–µ–∂–¥—É–Ω–∞—Ä–æ–¥–Ω–æ–π –∫–æ–º–ø–∞–Ω–∏–µ–π
    print("5Ô∏è‚É£ JUNIOR –í –ú–ï–ñ–î–£–ù–ê–†–û–î–ù–û–ô –ö–û–ú–ü–ê–ù–ò–ò")
    demonstrate_prompt(
        candidate_level_hint="JUNIOR",
        company_format_hint="INTERNATIONAL",
        preparation_time_available="3 –¥–Ω—è",
        focus_areas=["–∞–Ω–≥–ª–∏–π—Å–∫–∏–π —è–∑—ã–∫", "–±–∞–∑–æ–≤—ã–µ –∞–ª–≥–æ—Ä–∏—Ç–º—ã"],
        extra_context={
            "language": "–∏–Ω—Ç–µ—Ä–≤—å—é –Ω–∞ –∞–Ω–≥–ª–∏–π—Å–∫–æ–º",
            "timezone": "UTC+3",
            "remote": "–ø–æ–ª–Ω–æ—Å—Ç—å—é —É–¥–∞–ª–µ–Ω–Ω–∞—è —Ä–∞–±–æ—Ç–∞"
        }
    )


if __name__ == "__main__":
    main()