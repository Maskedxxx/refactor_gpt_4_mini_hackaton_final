# examples/test_pdf_export.py
# --- agent_meta ---
# role: pdf-export-example
# owner: @backend
# contract: –ü—Ä–∏–º–µ—Ä —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è PDF —ç–∫—Å–ø–æ—Ä—Ç–∞ —Å —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–º–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º–∏ GAP –∞–Ω–∞–ª–∏–∑–∞
# last_reviewed: 2025-08-17
# interfaces:
#   - main(result_file: str) -> int
# --- /agent_meta ---

from __future__ import annotations

import argparse
import asyncio
import json
from datetime import datetime
from pathlib import Path

from src.pdf_export.service import PDFExportService
from src.pdf_export.formatters import GapAnalyzerPDFFormatter, CoverLetterPDFFormatter, InterviewChecklistPDFFormatter
from src.utils import get_logger

log = get_logger("examples.test_pdf_export")


async def run_async(result_file: str, feature_name: str = "gap_analyzer") -> int:
    """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ PDF —ç–∫—Å–ø–æ—Ä—Ç–∞ —Å —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–º LLM —Ñ–∏—á–∏."""
    
    # –ó–∞–≥—Ä—É–∑–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω–æ–≥–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞
    test_data_dir = Path("tests/data")
    result_path = test_data_dir / result_file
    
    if not result_path.exists():
        print(f"‚ùå –§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω: {result_path}")
        print("üí° –°–≥–µ–Ω–µ—Ä–∏—Ä—É–π—Ç–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç –∫–æ–º–∞–Ω–¥–æ–π:")
        if feature_name == "gap_analyzer":
            print("   python -m examples.generate_gap_analysis --fake-llm --save-result")
        elif feature_name == "cover_letter":
            print("   python -m examples.generate_cover_letter --fake-llm --save-result")
        elif feature_name == "interview_checklist":
            print("   python -m examples.generate_interview_checklist --fake-llm --save-result")
        return 1
    
    with result_path.open("r", encoding="utf-8") as f:
        feature_result = json.load(f)
    
    log.info("–ó–∞–≥—Ä—É–∂–µ–Ω —Ä–µ–∑—É–ª—å—Ç–∞—Ç %s –∏–∑ %s", feature_name, result_path)
    
    # –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –º–µ—Ç–∞–¥–∞–Ω–Ω—ã—Ö
    metadata = {
        "feature_name": feature_name,
        "version": "v1",
        "generated_at": datetime.now().isoformat(),
        "source_file": str(result_path)
    }
    
    # –í—ã–±–æ—Ä —Ñ–æ—Ä–º–∞—Ç—Ç–µ—Ä–∞ –ø–æ —Ç–∏–ø—É —Ñ–∏—á–∏
    formatters = {
        "gap_analyzer": GapAnalyzerPDFFormatter(),
        "cover_letter": CoverLetterPDFFormatter(),
        "interview_checklist": InterviewChecklistPDFFormatter(),
    }
    
    formatter = formatters.get(feature_name)
    if not formatter:
        print(f"‚ùå –ù–µ–ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º–∞—è —Ñ–∏—á–∞: {feature_name}")
        print(f"üí° –î–æ—Å—Ç—É–ø–Ω—ã–µ —Ñ–∏—á–∏: {', '.join(formatters.keys())}")
        return 1
    
    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è PDF —Å–µ—Ä–≤–∏—Å–∞
    pdf_service = PDFExportService()
    
    # –ì–µ–Ω–µ—Ä–∞—Ü–∏—è PDF
    log.info("–ì–µ–Ω–µ—Ä–∞—Ü–∏—è PDF...")
    pdf_bytes = await pdf_service.generate_pdf(
        formatter=formatter,
        data=feature_result,
        metadata=metadata
    )
    
    # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ PDF —Ñ–∞–π–ª–∞
    output_dir = Path("output")
    output_dir.mkdir(exist_ok=True)
    
    pdf_filename = formatter.get_filename(metadata)
    pdf_path = output_dir / pdf_filename
    
    with pdf_path.open("wb") as f:
        f.write(pdf_bytes)
    
    print("‚úÖ PDF —É—Å–ø–µ—à–Ω–æ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω!")
    print(f"üìÅ –§–∞–π–ª: {pdf_path}")
    print(f"üìä –†–∞–∑–º–µ—Ä: {len(pdf_bytes):,} –±–∞–π—Ç")
    
    # –°–ø–µ—Ü–∏—Ñ–∏—á–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ñ–∏—á–∏
    if feature_name == "gap_analyzer":
        match_pct = feature_result.get('overall_match_percentage', 'N/A')
        print(f"üéØ –°–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ: {match_pct}%")
    elif feature_name == "cover_letter":
        quality_scores = feature_result.get('personalization_score', 'N/A')
        print(f"üéØ –ü–µ—Ä—Å–æ–Ω–∞–ª–∏–∑–∞—Ü–∏—è: {quality_scores}/10")
    elif feature_name == "interview_checklist":
        total_time = feature_result.get('time_estimates', {}).get('total_time_needed', 'N/A')
        print(f"‚è≥ –û–±—â–µ–µ –≤—Ä–µ–º—è –ø–æ–¥–≥–æ—Ç–æ–≤–∫–∏: {total_time}")
    
    return 0


def main() -> int:
    p = argparse.ArgumentParser(description="–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ PDF —ç–∫—Å–ø–æ—Ä—Ç–∞ LLM —Ñ–∏—á")
    p.add_argument("--result-file", type=str, help="–ò–º—è —Ñ–∞–π–ª–∞ —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–º –≤ tests/data/")
    p.add_argument("--feature", type=str, choices=["gap_analyzer", "cover_letter", "interview_checklist"], 
                   default="gap_analyzer", help="–¢–∏–ø —Ñ–∏—á–∏ –¥–ª—è PDF —ç–∫—Å–ø–æ—Ä—Ç–∞")
    args = p.parse_args()
    
    if not args.result_file:
        # –ê–≤—Ç–æ–ø–æ–∏—Å–∫ –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ —Ñ–∞–π–ª–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ –¥–ª—è –≤—ã–±—Ä–∞–Ω–Ω–æ–π —Ñ–∏—á–∏
        test_data_dir = Path("tests/data")
        pattern = f"{args.feature.replace('_', '_')}_result_*.json"
        feature_files = list(test_data_dir.glob(pattern))
        
        if not feature_files:
            print(f"‚ùå –ù–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã—Ö —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –¥–ª—è {args.feature}")
            print("üí° –°–≥–µ–Ω–µ—Ä–∏—Ä—É–π—Ç–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç –∫–æ–º–∞–Ω–¥–æ–π:")
            if args.feature == "gap_analyzer":
                print("   python -m examples.generate_gap_analysis --fake-llm --save-result")
            elif args.feature == "cover_letter":
                print("   python -m examples.generate_cover_letter --fake-llm --save-result")
            elif args.feature == "interview_checklist":
                print("   python -m examples.generate_interview_checklist --fake-llm --save-result")
            return 1
        
        # –ë–µ—Ä–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–π –ø–æ –≤—Ä–µ–º–µ–Ω–∏ —Å–æ–∑–¥–∞–Ω–∏—è
        latest_file = max(feature_files, key=lambda p: p.stat().st_mtime)
        args.result_file = latest_file.name
        print(f"üîç –ê–≤—Ç–æ–≤—ã–±–æ—Ä —Ñ–∞–π–ª–∞: {args.result_file}")
    
    return asyncio.run(run_async(args.result_file, args.feature))


if __name__ == "__main__":
    raise SystemExit(main())