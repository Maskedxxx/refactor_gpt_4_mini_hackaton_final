# examples/test_pdf_export.py
# --- agent_meta ---
# role: pdf-export-example
# owner: @backend
# contract: –ü—Ä–∏–º–µ—Ä —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è PDF —ç–∫—Å–ø–æ—Ä—Ç–∞ —Å —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–º–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º–∏ GAP –∞–Ω–∞–ª–∏–∑–∞
# last_reviewed: 2025-08-17
# interfaces:
#   - main(result_file: str) -> int
# --- /agent_meta ---

from __future__ import annotations

import argparse
import asyncio
import json
from datetime import datetime
from pathlib import Path

from src.pdf_export.service import PDFExportService
from src.pdf_export.formatters import GapAnalyzerPDFFormatter
from src.utils import get_logger

log = get_logger("examples.test_pdf_export")


async def run_async(result_file: str) -> int:
    """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ PDF —ç–∫—Å–ø–æ—Ä—Ç–∞ —Å —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–º GAP –∞–Ω–∞–ª–∏–∑–∞."""
    
    # –ó–∞–≥—Ä—É–∑–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω–æ–≥–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞
    test_data_dir = Path("tests/data")
    result_path = test_data_dir / result_file
    
    if not result_path.exists():
        print("‚ùå –§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω: {result_path}")
        print("üí° –°–≥–µ–Ω–µ—Ä–∏—Ä—É–π—Ç–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç –∫–æ–º–∞–Ω–¥–æ–π:")
        print("   python -m examples.generate_gap_analysis --save-result")
        return 1
    
    with result_path.open("r", encoding="utf-8") as f:
        gap_result = json.load(f)
    
    log.info("–ó–∞–≥—Ä—É–∂–µ–Ω GAP —Ä–µ–∑—É–ª—å—Ç–∞—Ç –∏–∑ %s", result_path)
    
    # –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –º–µ—Ç–∞–¥–∞–Ω–Ω—ã—Ö
    metadata = {
        "feature_name": "gap_analyzer",
        "version": "v1",
        "generated_at": datetime.now().isoformat(),
        "source_file": str(result_path)
    }
    
    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è PDF —Å–µ—Ä–≤–∏—Å–∞
    pdf_service = PDFExportService()
    formatter = GapAnalyzerPDFFormatter()
    
    # –ì–µ–Ω–µ—Ä–∞—Ü–∏—è PDF
    log.info("–ì–µ–Ω–µ—Ä–∞—Ü–∏—è PDF...")
    pdf_bytes = await pdf_service.generate_pdf(
        formatter=formatter,
        data=gap_result,
        metadata=metadata
    )
    
    # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ PDF —Ñ–∞–π–ª–∞
    output_dir = Path("output")
    output_dir.mkdir(exist_ok=True)
    
    pdf_filename = formatter.get_filename(metadata)
    pdf_path = output_dir / pdf_filename
    
    with pdf_path.open("wb") as f:
        f.write(pdf_bytes)
    
    print(f"‚úÖ PDF —É—Å–ø–µ—à–Ω–æ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω!")
    print(f"üìÅ –§–∞–π–ª: {pdf_path}")
    print(f"üìä –†–∞–∑–º–µ—Ä: {len(pdf_bytes):,} –±–∞–π—Ç")
    print(f"üéØ GAP –∞–Ω–∞–ª–∏–∑: {gap_result.get('overall_match_percentage', 'N/A')}% —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ")
    
    return 0


def main() -> int:
    p = argparse.ArgumentParser(description="–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ PDF —ç–∫—Å–ø–æ—Ä—Ç–∞ GAP –∞–Ω–∞–ª–∏–∑–∞")
    p.add_argument("--result-file", type=str, help="–ò–º—è —Ñ–∞–π–ª–∞ —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–º –≤ tests/data/")
    args = p.parse_args()
    
    if not args.result_file:
        # –ê–≤—Ç–æ–ø–æ–∏—Å–∫ –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ —Ñ–∞–π–ª–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞
        test_data_dir = Path("tests/data")
        gap_files = list(test_data_dir.glob("gap_analysis_result_*.json"))
        
        if not gap_files:
            print("‚ùå –ù–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã—Ö —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ GAP –∞–Ω–∞–ª–∏–∑–∞")
            print("üí° –°–≥–µ–Ω–µ—Ä–∏—Ä—É–π—Ç–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç –∫–æ–º–∞–Ω–¥–æ–π:")
            print("   python -m examples.generate_gap_analysis --save-result")
            return 1
        
        # –ë–µ—Ä–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–π –ø–æ –≤—Ä–µ–º–µ–Ω–∏ —Å–æ–∑–¥–∞–Ω–∏—è
        latest_file = max(gap_files, key=lambda p: p.stat().st_mtime)
        args.result_file = latest_file.name
        print(f"üîç –ê–≤—Ç–æ–≤—ã–±–æ—Ä —Ñ–∞–π–ª–∞: {args.result_file}")
    
    return asyncio.run(run_async(args.result_file))


if __name__ == "__main__":
    raise SystemExit(main())